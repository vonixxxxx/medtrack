datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

model User {
  id               String       @id @default(cuid())
  email            String       @unique
  password         String
  name             String?
  role             String       @default("patient") // 'patient' | 'clinician'
  hospitalCode     String       // required field to link patients to clinicians
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Password reset fields
  resetToken       String?
  resetTokenExpiry DateTime?
  
  // 2FA fields
  is2FAEnabled     Boolean      @default(false)
  twoFASecret      String?
  
  // Survey completion status
  surveyCompleted  Boolean      @default(false)
  
  // Relations
  patientProfile   Patient?
  clinicianProfile Clinician?
  medications      Medication[]
  metrics          Metric[]
  cycles           MedicationCycle[]
  notifications    Notification[]
  surveyData       UserSurveyData?
  
  @@index([hospitalCode])
  @@map("users")
}

model Patient {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id])
  
  // App-generated fields
  patient_audit_id String?   @unique
  imd_decile       Int?
  
  // Basic demographics
  dob            DateTime?
  sex            String?
  ethnicity      String?
  ethnic_group   String?
  location       String?
  postcode       String?
  nhs_number     String?   @unique
  mrn            String?   @unique
  
  // Clinical dates and measurements
  start_date     DateTime?
  height         Float?
  baseline_weight Float?
  baseline_bmi   Float?
  baseline_weight_date DateTime?
  
  // Cardiovascular risk factors
  ascvd          Boolean?
  htn            Boolean?
  hypertension   Boolean?
  dyslipidaemia  Boolean?
  ischaemic_heart_disease Boolean?
  heart_failure  Boolean?
  cerebrovascular_disease Boolean?
  pulmonary_hypertension Boolean?
  dvt            Boolean?
  pe             Boolean?
  
  // Sleep and respiratory
  osa            Boolean?
  sleep_studies  Boolean?
  cpap           Boolean?
  asthma         Boolean?
  
  // Diabetes
  t2dm           Boolean?
  prediabetes    Boolean?
  diabetes_type  String?
  hba1c_percent  Float?
  hba1c_mmol     Float?
  baseline_hba1c Float?
  baseline_hba1c_date DateTime?
  baseline_fasting_glucose Float?
  random_glucose Float?
  
  // Lipid profile
  baseline_tc    Float?
  baseline_hdl   Float?
  baseline_ldl   Float?
  baseline_tg    Float?
  baseline_lipid_date DateTime?
  lipid_lowering_treatment String?
  
  // Medications
  antihypertensive_medications String?
  all_medications_from_scr String?
  
  // Gastrointestinal
  gord           Boolean?
  
  // Renal
  ckd            Boolean?
  kidney_stones  Boolean?
  
  // Metabolic
  masld          Boolean?
  
  // Reproductive
  infertility    Boolean?
  pcos           Boolean?
  
  // Mental health
  anxiety        Boolean?
  depression     Boolean?
  bipolar_disorder Boolean?
  emotional_eating Boolean?
  schizoaffective_disorder Boolean?
  
  // Musculoskeletal
  oa_knee        Boolean?
  oa_hip         Boolean?
  limited_mobility Boolean?
  lymphoedema    Boolean?
  
  // Endocrine
  thyroid_disorder Boolean?
  
  // Neurological
  iih            Boolean?
  epilepsy       Boolean?
  functional_neurological_disorder Boolean?
  
  // Oncology
  cancer         Boolean?
  
  // Bariatric surgery
  bariatric_gastric_band Boolean?
  bariatric_sleeve Boolean?
  bariatric_bypass Boolean?
  bariatric_balloon Boolean?
  
  // Clinical data
  diagnoses_coded_in_scr String?
  total_qualifying_comorbidities Int?
  mes            Float?
  
  // Notes and criteria
  notes          String?
  criteria_for_wegovy String?
  
  // Relationships
  conditions     Condition[]
  ai_audit_logs  AiAuditLog[]
  medical_notes  MedicalNote[]
  lab_results    LabResult[]
  vital_signs    VitalSign[]
  medications    PatientMedication[]
  metric_trends  MetricTrend[]
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@index([nhs_number])
  @@index([mrn])
  @@index([postcode])
  @@index([ethnic_group])
  @@map("patients")
}

model Clinician {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])
  hospitalCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@map("clinicians")
}

model Condition {
  id         String @id @default(cuid())
  patientId  String
  patient    Patient @relation(fields: [patientId], references: [id])
  name       String
  normalized String
  createdAt  DateTime @default(now())
  
  @@map("conditions")
}

model AiAuditLog {
  id                String   @id @default(cuid())
  patientId         String
  patient           Patient  @relation(fields: [patientId], references: [id])
  field_name        String
  old_value         String?
  new_value         String?
  ai_confidence     Float?
  ai_suggestion     String?
  clinician_approved Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([patientId])
  @@index([createdAt])
  @@map("ai_audit_log")
}


model Medication {
  id          String          @id @default(cuid())
  userId      String
  name        String
  startDate   DateTime
  endDate     DateTime
  dosage      String
  frequency   String
  logs        MedicationLog[]
  user        User            @relation(fields: [userId], references: [id])
}

model MedicationLog {
  id           String     @id @default(cuid())
  medicationId String
  date         DateTime
  dosage       String
  medication   Medication @relation(fields: [medicationId], references: [id])
}

model Metric {
  id               String   @id @default(cuid())
  userId           String
  date             DateTime @default(now())
  weight           Float
  height           Float
  bmi              Float
  bloodPressure    String
  hipCircumference Float?
  user             User     @relation(fields: [userId], references: [id])
}

/// NEW V2 MODELS ------------------------------------

model MedicationCycle {
  id            String       @id @default(cuid())
  userId        String
  name          String
  dosage        String
  startDate     DateTime
  endDate       DateTime?
  frequencyDays Int         // e.g., 1 = daily, 7 = weekly
  dosesPerDay   Int         @default(1)
  metricsToMonitor String?  // JSON string of metrics and their frequencies

  metricLogs    MetricLog[]
  doseLogs      DoseLog[]
  notifications Notification[]

  user          User         @relation(fields: [userId], references: [id])
}

model MetricLog {
  id        String      @id @default(cuid())
  cycleId   String
  date      DateTime     @default(now())
  kind      String       // e.g., WEIGHT, BLOOD_PRESSURE
  valueFloat Float?
  valueText  String?
  notes      String?

  cycle     MedicationCycle @relation(fields: [cycleId], references: [id])
}

model DoseLog {
  id        String   @id @default(cuid())
  cycleId   String
  date      DateTime
  taken     Boolean @default(false)

  cycle     MedicationCycle @relation(fields: [cycleId], references: [id])

  @@unique([cycleId, date])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  cycleId   String?
  date      DateTime
  message   String
  sent      Boolean   @default(false)

  user      User      @relation(fields: [userId], references: [id])
  cycle     MedicationCycle? @relation(fields: [cycleId], references: [id])
}

/// END V2 MODELS ------------------------------------

model UserSurveyData {
  id                    String   @id @default(cuid())
  userId                String   @unique
  user                  User     @relation(fields: [userId], references: [id])
  
  // Step 1: Basic Demographics & Account Info
  dateOfBirth           DateTime?
  biologicalSex         String?  // Male/Female/Other
  ethnicity             String?  // ONS categories
  
  // Step 2: Female-Specific Questions
  hasMenses             Boolean?
  ageAtMenarche         Int?
  menstrualRegularity   String?
  lastMenstrualPeriod   DateTime?
  cycleLength           Int?
  periodDuration        Int?
  usesContraception     Boolean?
  contraceptionType     String?
  hasPreviousPregnancies Boolean?
  isPerimenopausal      Boolean?
  isPostmenopausal      Boolean?
  ageAtMenopause        Int?
  menopauseType         String?  // natural/surgical
  isOnHRT               Boolean?
  hrtType               String?
  
  // Step 3: Male-Specific Questions
  iiefScore             Int?     // IIEF-5 Score
  lowTestosteroneSymptoms String? // JSON array of symptoms
  redFlagQuestions      String?  // JSON array of red flags
  
  // Step 4: Lifestyle Assessment
  auditScore            Int?     // AUDIT Questionnaire score
  smokingStatus         String?
  smokingStartAge       Int?
  cigarettesPerDay      Int?
  vapingDevice          String?
  nicotineMg            Float?
  pgVgRatio             String?
  usagePattern          String?
  psecdiScore           Int?
  readinessToQuit       Int?
  ipaqScore             Int?     // International Physical Activity Questionnaire
  
  // Step 5: Anthropometrics & Vitals
  weight                Float?
  height                Float?
  waistCircumference    Float?
  hipCircumference      Float?
  neckCircumference     Float?
  systolicBP            Int?
  diastolicBP           Int?
  
  // Metadata
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@map("user_survey_data")
}

// Medical Notes and AI Processing Models
model MedicalNote {
  id                String   @id @default(cuid())
  patientId         String
  patient           Patient  @relation(fields: [patientId], references: [id])
  
  // Raw note data
  raw_text          String
  note_type         String?  // "consultation", "discharge", "lab_report", etc.
  source            String?  // "manual_entry", "ai_parsed", "imported"
  
  // AI Processing
  ai_processed      Boolean  @default(false)
  ai_confidence     Float?
  ai_model_used     String?
  processing_errors String?  // JSON array of any processing errors
  
  // Extracted structured data
  extracted_data    String?  // JSON string of all extracted fields
  patient_name      String?  // Extracted patient name for matching
  age               Int?
  sex               String?
  conditions        String?  // JSON array of conditions
  medications       String?  // JSON array of medications
  allergies         String?  // JSON array of allergies
  lab_results       String?  // JSON array of lab results
  vital_signs       String?  // JSON array of vital signs
  impression        String?
  plan              String?
  
  // Metadata
  created_by        String?  // User ID who created/processed this note
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  @@index([patientId])
  @@index([created_at])
  @@index([ai_processed])
  @@map("medical_notes")
}

model LabResult {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  
  metric_name String   // e.g., "HbA1c", "LDL", "HDL", "eGFR"
  value       Float
  unit        String   // e.g., "%", "mg/dL", "mL/min/1.73m²"
  date        DateTime
  reference_range String? // e.g., "4.0-6.0%"
  status      String?  // "normal", "high", "low", "critical"
  
  // Source tracking
  source_note_id String? // Link to MedicalNote if extracted from note
  manually_entered Boolean @default(false)
  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([patientId])
  @@index([metric_name])
  @@index([date])
  @@map("lab_results")
}

model VitalSign {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  
  vital_type  String   // e.g., "blood_pressure", "heart_rate", "temperature", "weight", "height"
  value       Float
  unit        String   // e.g., "mmHg", "bpm", "°C", "kg", "cm"
  date        DateTime
  
  // For blood pressure, store both values
  value_secondary Float? // For diastolic BP when vital_type is "blood_pressure"
  
  // Source tracking
  source_note_id String? // Link to MedicalNote if extracted from note
  manually_entered Boolean @default(false)
  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([patientId])
  @@index([vital_type])
  @@index([date])
  @@map("vital_signs")
}

model PatientMedication {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  
  name        String
  dosage      String
  frequency   String
  route       String?  // e.g., "oral", "injection", "topical"
  start_date  DateTime
  end_date    DateTime?
  status      String   @default("active") // "active", "discontinued", "on_hold"
  
  // Source tracking
  source_note_id String? // Link to MedicalNote if extracted from note
  manually_entered Boolean @default(false)
  
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  @@index([patientId])
  @@index([status])
  @@index([start_date])
  @@map("patient_medications")
}

model MetricTrend {
  id          String   @id @default(cuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  
  metric_name String   // e.g., "HbA1c", "BMI", "Weight", "Blood Pressure"
  value       Float
  unit        String
  date        DateTime
  
  // Trend analysis
  change_from_previous Float? // Change from previous measurement
  change_percentage    Float? // Percentage change
  trend_direction      String? // "improving", "worsening", "stable"
  
  // Source tracking
  source_type String   // "lab_result", "vital_sign", "manual_entry"
  source_id   String?  // ID of the source record
  
  created_at  DateTime @default(now())
  
  @@index([patientId])
  @@index([metric_name])
  @@index([date])
  @@map("metric_trends")
}

// AI Processing Configuration
model AIProcessingConfig {
  id                String   @id @default(cuid())
  model_name        String   // e.g., "llama3.2:latest", "mistral-7b-instruct"
  model_provider    String   // "ollama", "huggingface", "openai"
  system_prompt     String   // The system prompt for medical note parsing
  max_tokens        Int      @default(2048)
  temperature       Float    @default(0.1)
  is_active         Boolean  @default(true)
  
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  
  @@map("ai_processing_config")
}
