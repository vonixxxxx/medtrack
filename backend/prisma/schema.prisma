generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String
  name                 String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  medications          Medication[]
  medicationCycles     MedicationCycle[]
  medicationLogs       MedicationLog[]
  metrics              Metric[]
  notifications        Notification[]
  screeningResults     ScreeningResult[]
  userMedicationCycles UserMedicationCycle[]
}

model Medication {
  id        String            @id @default(cuid())
  name      String
  dosage    String
  frequency String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean           @default(true)
  userId    String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  user      User              @relation(fields: [userId], references: [id])
  cycles    MedicationCycle[]
  logs      MedicationLog[]
}

model MedicationLog {
  id           String     @id @default(cuid())
  medicationId String
  takenAt      DateTime
  notes        String?
  createdAt    DateTime   @default(now())
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  medication   Medication @relation(fields: [medicationId], references: [id])
}

model Metric {
  id        String   @id @default(cuid())
  name      String   @default("")
  value     Float    @default(0)
  unit      String   @default("")
  userId    String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  type      String   @default("reminder")
  title     String   @default("")
  message   String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model MedicationCycle {
  id           String     @id @default(cuid())
  medicationId String
  startDate    DateTime
  endDate      DateTime?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  medication   Medication @relation(fields: [medicationId], references: [id])
}

model ScreeningResult {
  id        String   @id @default(cuid())
  type      String
  score     Int
  result    String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model MedicationValidation {
  id          String                @id @default(uuid())
  genericName String                @unique @map("generic_name")
  atcClass    String?               @map("atc_class")
  classHuman  String?               @map("class_human")
  synonyms    String                @default("[]")
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime              @updatedAt @map("updated_at")
  products    MedicationProduct[]
  userCycles  UserMedicationCycle[]

  @@map("medications")
}

model MedicationProduct {
  id                 String                     @id @default(uuid())
  medicationId       String                     @map("medication_id")
  brandName          String                     @map("brand_name")
  route              String
  form               String
  allowedIntakeType  String                     @map("allowed_intake_type")
  defaultPlaces      String                     @default("[]") @map("default_places")
  allowedFrequencies String                     @default("[]") @map("allowed_frequencies")
  isActive           Boolean                    @default(true) @map("is_active")
  notes              String?
  createdAt          DateTime                   @default(now()) @map("created_at")
  updatedAt          DateTime                   @updatedAt @map("updated_at")
  medication         MedicationValidation       @relation(fields: [medicationId], references: [id], onDelete: Cascade)
  strengths          MedicationStrength[]
  validationRules    MedicationValidationRule[]
  userCycles         UserMedicationCycle[]

  @@map("medication_products")
}

model MedicationStrength {
  id            String            @id @default(uuid())
  productId     String            @map("product_id")
  strengthValue Float             @map("strength_value")
  strengthUnit  String            @map("strength_unit")
  frequency     String
  label         String?
  isActive      Boolean           @default(true) @map("is_active")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  product       MedicationProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("medication_strengths")
}

model MedicationValidationRule {
  id                String            @id @default(uuid())
  productId         String            @map("product_id")
  maxDosePerPeriod  String?           @map("max_dose_per_period")
  minDosePerPeriod  String?           @map("min_dose_per_period")
  contraindications String?
  warnings          String?
  version           Int               @default(1)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  product           MedicationProduct @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("medication_validation_rules")
}

model UserMedicationCycle {
  id            String               @id @default(uuid())
  userId        String               @map("user_id")
  medicationId  String               @map("medication_id")
  productId     String               @map("product_id")
  strengthValue Float                @map("strength_value")
  strengthUnit  String               @map("strength_unit")
  frequency     String
  intakeType    String               @map("intake_type")
  intakePlace   String               @map("intake_place")
  startDate     DateTime             @map("start_date")
  endDate       DateTime?            @map("end_date")
  customFlags   String               @default("{}") @map("custom_flags")
  notes         String?
  isActive      Boolean              @default(true) @map("is_active")
  createdAt     DateTime             @default(now()) @map("created_at")
  updatedAt     DateTime             @updatedAt @map("updated_at")
  product       MedicationProduct    @relation(fields: [productId], references: [id])
  medication    MedicationValidation @relation(fields: [medicationId], references: [id])
  user          User                 @relation(fields: [userId], references: [id])

  @@map("user_medication_cycles")
}
