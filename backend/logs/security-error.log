{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:25\n\n  420 const attempts = user.loginAttempts + 1;\n  421 const lockUntil = attempts >= 5 ? new Date(Date.now() + 15 * 60 * 1000) : null; // Lock for 15 minutes\n  422 \n→ 423 await prisma.user.update({\n        where: {\n          id: \"cmf86z2g80000dzq6gr3e9tmz\"\n        },\n        data: {\n          loginAttempts: NaN,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:25\n\n  420 const attempts = user.loginAttempts + 1;\n  421 const lockUntil = attempts >= 5 ? new Date(Date.now() + 15 * 60 * 1000) : null; // Lock for 15 minutes\n  422 \n→ 423 await prisma.user.update({\n        where: {\n          id: \"cmf86z2g80000dzq6gr3e9tmz\"\n        },\n        data: {\n          loginAttempts: NaN,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:7)","timestamp":"2025-09-07T09:51:32.863Z"}
{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:25\n\n  420 const attempts = user.loginAttempts + 1;\n  421 const lockUntil = attempts >= 5 ? new Date(Date.now() + 15 * 60 * 1000) : null; // Lock for 15 minutes\n  422 \n→ 423 await prisma.user.update({\n        where: {\n          id: \"cmf87yu9i0002cpgr0hnjtqvg\"\n        },\n        data: {\n          loginAttempts: NaN,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:25\n\n  420 const attempts = user.loginAttempts + 1;\n  421 const lockUntil = attempts >= 5 ? new Date(Date.now() + 15 * 60 * 1000) : null; // Lock for 15 minutes\n  422 \n→ 423 await prisma.user.update({\n        where: {\n          id: \"cmf87yu9i0002cpgr0hnjtqvg\"\n        },\n        data: {\n          loginAttempts: NaN,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:423:7)","timestamp":"2025-09-07T09:58:30.740Z"}
{"error":"\nInvalid `tx.user.create()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:221:34\n\n  218 // Create user with transaction\n  219 const result = await prisma.$transaction(async (tx) => {\n  220   // Create user\n→ 221   const user = await tx.user.create({\n          data: {\n            email: \"demo@medtrack.com\",\n            password: \"$2b$12$dQ2Cyqpes8drwy2cjr2.guZ/3IHLXoijgBqkOQEjB1S0X9gtqvzsi\",\n            firstName: \"Demo\",\n            ~~~~~~~~~\n            lastName: \"User\",\n            phoneNumber: undefined,\n            dateOfBirth: null,\n            gender: undefined,\n            ethnicity: undefined,\n            address: undefined,\n            postalCode: undefined,\n            height: undefined,\n            weight: undefined,\n            waistCircumference: undefined,\n            hipCircumference: undefined,\n            neckCircumference: undefined,\n            bloodPressure: undefined,\n            bmi: null,\n            whr: null,\n            whtr: null,\n            bri: null,\n            emailVerificationToken: \"aea8af98ae4f594dfaf468d6004894cd13a43545c2a472cc3275104fbd5bc100\",\n            gdprConsent: false,\n            gdprConsentDate: null,\n            dataProcessingConsent: false,\n            researchConsent: false,\n            marketingConsent: false,\n        ?   id?: String,\n        ?   name?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   medications?: MedicationCreateNestedManyWithoutUserInput,\n        ?   medicationCycles?: MedicationCycleCreateNestedManyWithoutUserInput,\n        ?   medicationLogs?: MedicationLogCreateNestedManyWithoutUserInput,\n        ?   metrics?: MetricCreateNestedManyWithoutUserInput,\n        ?   notifications?: NotificationCreateNestedManyWithoutUserInput,\n        ?   screeningResults?: ScreeningResultCreateNestedManyWithoutUserInput,\n        ?   userMedicationCycles?: UserMedicationCycleCreateNestedManyWithoutUserInput\n          }\n        })\n\nUnknown argument `firstName`. Available options are marked with ?.","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `tx.user.create()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:221:34\n\n  218 // Create user with transaction\n  219 const result = await prisma.$transaction(async (tx) => {\n  220   // Create user\n→ 221   const user = await tx.user.create({\n          data: {\n            email: \"demo@medtrack.com\",\n            password: \"$2b$12$dQ2Cyqpes8drwy2cjr2.guZ/3IHLXoijgBqkOQEjB1S0X9gtqvzsi\",\n            firstName: \"Demo\",\n            ~~~~~~~~~\n            lastName: \"User\",\n            phoneNumber: undefined,\n            dateOfBirth: null,\n            gender: undefined,\n            ethnicity: undefined,\n            address: undefined,\n            postalCode: undefined,\n            height: undefined,\n            weight: undefined,\n            waistCircumference: undefined,\n            hipCircumference: undefined,\n            neckCircumference: undefined,\n            bloodPressure: undefined,\n            bmi: null,\n            whr: null,\n            whtr: null,\n            bri: null,\n            emailVerificationToken: \"aea8af98ae4f594dfaf468d6004894cd13a43545c2a472cc3275104fbd5bc100\",\n            gdprConsent: false,\n            gdprConsentDate: null,\n            dataProcessingConsent: false,\n            researchConsent: false,\n            marketingConsent: false,\n        ?   id?: String,\n        ?   name?: String | Null,\n        ?   createdAt?: DateTime,\n        ?   updatedAt?: DateTime,\n        ?   medications?: MedicationCreateNestedManyWithoutUserInput,\n        ?   medicationCycles?: MedicationCycleCreateNestedManyWithoutUserInput,\n        ?   medicationLogs?: MedicationLogCreateNestedManyWithoutUserInput,\n        ?   metrics?: MetricCreateNestedManyWithoutUserInput,\n        ?   notifications?: NotificationCreateNestedManyWithoutUserInput,\n        ?   screeningResults?: ScreeningResultCreateNestedManyWithoutUserInput,\n        ?   userMedicationCycles?: UserMedicationCycleCreateNestedManyWithoutUserInput\n          }\n        })\n\nUnknown argument `firstName`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async /Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:221:20\n    at async Proxy._transactionWithCallback (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:219:20)","timestamp":"2025-09-07T09:58:35.880Z"}
{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:459:23\n\n  456 }\n  457 \n  458 // Reset login attempts and update last login\n→ 459 await prisma.user.update({\n        where: {\n          id: \"cmf86z2g80000dzq6gr3e9tmz\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-07T09:59:23.624Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:459:23\n\n  456 }\n  457 \n  458 // Reset login attempts and update last login\n→ 459 await prisma.user.update({\n        where: {\n          id: \"cmf86z2g80000dzq6gr3e9tmz\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-07T09:59:23.624Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   userMedicationCycles?: UserMedicationCycleUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:459:5)","timestamp":"2025-09-07T09:59:23.629Z"}
{"error":"\nInvalid `tx.healthProfile.create()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:253:30\n\n  250 });\n  251 \n  252 // Create health profile\n→ 253 await tx.healthProfile.create({\n        data: {\n          userId: \"cmf9iv5rm00019mtp83wtyif9\",\n          hasMenses: undefined,\n          ageAtMenarche: undefined,\n          menstrualRegularity: undefined,\n          cycleLength: undefined,\n          periodDuration: undefined,\n          lastMenstrualPeriod: null,\n          ~~~~~~~~~~~~~~~~~~~\n          usesContraception: undefined,\n          contraceptionType: undefined,\n          hasPreviousPregnancies: undefined,\n          numberOfPregnancies: undefined,\n          isPerimenopausal: undefined,\n          isPostmenopausal: undefined,\n          menopauseType: undefined,\n          hrtUsage: undefined,\n          hrtType: undefined,\n          iief5Score: undefined,\n          lowTestosteroneSymptoms: [],\n          redFlagConditions: [],\n          smokingStatus: undefined,\n          alcoholConsumption: undefined,\n          physicalActivity: undefined,\n          dietPattern: undefined,\n          sleepQuality: undefined,\n          currentMedications: [],\n          allergies: [],\n          medicalConditions: [],\n          familyHistory: undefined,\n          auditScore: undefined,\n          ipaqScore: undefined,\n          iwqolScore: undefined,\n          sf36PCS: undefined,\n          sf36MCS: undefined,\n          hit6Score: undefined,\n          stopBangScore: undefined,\n      ?   id?: String,\n      ?   dateOfBirth?: DateTime | Null,\n      ?   gender?: String | Null,\n      ?   ethnicity?: String | Null,\n      ?   address?: String | Null,\n      ?   postalCode?: String | Null,\n      ?   height?: Float | Null,\n      ?   weight?: Float | Null,\n      ?   waistCircumference?: Float | Null,\n      ?   hipCircumference?: Float | Null,\n      ?   neckCircumference?: Float | Null,\n      ?   bloodPressure?: String | Null,\n      ?   bmi?: Float | Null,\n      ?   whr?: Float | Null,\n      ?   whtr?: Float | Null,\n      ?   bri?: Float | Null,\n      ?   dietPatterns?: String | Null,\n      ?   sleepHabits?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime\n        }\n      })\n\nUnknown argument `lastMenstrualPeriod`. Available options are marked with ?.","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `tx.healthProfile.create()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:253:30\n\n  250 });\n  251 \n  252 // Create health profile\n→ 253 await tx.healthProfile.create({\n        data: {\n          userId: \"cmf9iv5rm00019mtp83wtyif9\",\n          hasMenses: undefined,\n          ageAtMenarche: undefined,\n          menstrualRegularity: undefined,\n          cycleLength: undefined,\n          periodDuration: undefined,\n          lastMenstrualPeriod: null,\n          ~~~~~~~~~~~~~~~~~~~\n          usesContraception: undefined,\n          contraceptionType: undefined,\n          hasPreviousPregnancies: undefined,\n          numberOfPregnancies: undefined,\n          isPerimenopausal: undefined,\n          isPostmenopausal: undefined,\n          menopauseType: undefined,\n          hrtUsage: undefined,\n          hrtType: undefined,\n          iief5Score: undefined,\n          lowTestosteroneSymptoms: [],\n          redFlagConditions: [],\n          smokingStatus: undefined,\n          alcoholConsumption: undefined,\n          physicalActivity: undefined,\n          dietPattern: undefined,\n          sleepQuality: undefined,\n          currentMedications: [],\n          allergies: [],\n          medicalConditions: [],\n          familyHistory: undefined,\n          auditScore: undefined,\n          ipaqScore: undefined,\n          iwqolScore: undefined,\n          sf36PCS: undefined,\n          sf36MCS: undefined,\n          hit6Score: undefined,\n          stopBangScore: undefined,\n      ?   id?: String,\n      ?   dateOfBirth?: DateTime | Null,\n      ?   gender?: String | Null,\n      ?   ethnicity?: String | Null,\n      ?   address?: String | Null,\n      ?   postalCode?: String | Null,\n      ?   height?: Float | Null,\n      ?   weight?: Float | Null,\n      ?   waistCircumference?: Float | Null,\n      ?   hipCircumference?: Float | Null,\n      ?   neckCircumference?: Float | Null,\n      ?   bloodPressure?: String | Null,\n      ?   bmi?: Float | Null,\n      ?   whr?: Float | Null,\n      ?   whtr?: Float | Null,\n      ?   bri?: Float | Null,\n      ?   dietPatterns?: String | Null,\n      ?   sleepHabits?: String | Null,\n      ?   createdAt?: DateTime,\n      ?   updatedAt?: DateTime\n        }\n      })\n\nUnknown argument `lastMenstrualPeriod`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async /Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:253:7\n    at async Proxy._transactionWithCallback (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:219:20)","timestamp":"2025-09-07T10:00:27.649Z"}
{"error":"dietPatterns is not defined","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"ReferenceError: dietPatterns is not defined\n    at /Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:278:11\n    at async Proxy._transactionWithCallback (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:219:20)","timestamp":"2025-09-07T10:01:44.287Z"}
{"error":"dietPatterns is not defined","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"ReferenceError: dietPatterns is not defined\n    at /Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:278:25\n    at async Proxy._transactionWithCallback (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:8000)\n    at async exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:219:20)","timestamp":"2025-09-07T10:02:24.618Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:295:30)","timestamp":"2025-09-07T10:02:59.238Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"Login error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:420:30)","timestamp":"2025-09-07T10:03:37.967Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"Login error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:420:30)","timestamp":"2025-09-07T10:06:14.933Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"Login error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:420:30)","timestamp":"2025-09-07T10:06:28.962Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:300:30)","timestamp":"2025-09-07T10:08:25.975Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:300:30)","timestamp":"2025-09-07T10:09:38.746Z"}
{"level":"error","message":"Error getting product options: medicationsDataset.find is not a function","service":"medtrack-security","stack":"TypeError: medicationsDataset.find is not a function\n    at getProductOptions (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:523:45)","timestamp":"2025-09-10T10:45:38.307Z"}
{"level":"error","message":"Error getting product options: medicationsDataset.find is not a function","service":"medtrack-security","stack":"TypeError: medicationsDataset.find is not a function\n    at getProductOptions (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:523:45)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2025-09-10T10:45:41.987Z"}
{"level":"error","message":"Error getting product options: medicationsDataset.find is not a function","service":"medtrack-security","stack":"TypeError: medicationsDataset.find is not a function\n    at getProductOptions (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:523:45)","timestamp":"2025-09-10T10:50:21.880Z"}
{"error":"Cannot read properties of undefined (reading 'create')","level":"error","message":"NHS signup error","service":"medtrack-security","stack":"TypeError: Cannot read properties of undefined (reading 'create')\n    at exports.nhsSignup (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:300:30)","timestamp":"2025-09-28T10:41:22.727Z"}
{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:419:23\n\n  416 }\n  417 \n  418 // Reset login attempts and update last login\n→ 419 await prisma.user.update({\n        where: {\n          id: \"cmg3km4hu0000r6dtc9r9t9uw\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:42:33.053Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:419:23\n\n  416 }\n  417 \n  418 // Reset login attempts and update last login\n→ 419 await prisma.user.update({\n        where: {\n          id: \"cmg3km4hu0000r6dtc9r9t9uw\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:42:33.053Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:419:5)","timestamp":"2025-09-28T10:42:33.059Z"}
{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:23\n\n  313 }\n  314 \n  315 // Reset login attempts and update last login\n→ 316 await prisma.user.update({\n        where: {\n          id: \"cmg3km4hu0000r6dtc9r9t9uw\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:45:22.334Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:23\n\n  313 }\n  314 \n  315 // Reset login attempts and update last login\n→ 316 await prisma.user.update({\n        where: {\n          id: \"cmg3km4hu0000r6dtc9r9t9uw\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:45:22.334Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:5)","timestamp":"2025-09-28T10:45:22.339Z"}
{"error":"\nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:23\n\n  313 }\n  314 \n  315 // Reset login attempts and update last login\n→ 316 await prisma.user.update({\n        where: {\n          id: \"cmg3kwv6g0000hy8sqjct009l\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:51:14.412Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.","level":"error","message":"Login error","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.user.update()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:23\n\n  313 }\n  314 \n  315 // Reset login attempts and update last login\n→ 316 await prisma.user.update({\n        where: {\n          id: \"cmg3kwv6g0000hy8sqjct009l\"\n        },\n        data: {\n          loginAttempts: 0,\n          ~~~~~~~~~~~~~\n          lockedUntil: null,\n          lastLogin: new Date(\"2025-09-28T10:51:14.412Z\"),\n      ?   id?: String | StringFieldUpdateOperationsInput,\n      ?   email?: String | StringFieldUpdateOperationsInput,\n      ?   password?: String | StringFieldUpdateOperationsInput,\n      ?   name?: String | NullableStringFieldUpdateOperationsInput | Null,\n      ?   createdAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   updatedAt?: DateTime | DateTimeFieldUpdateOperationsInput,\n      ?   medications?: MedicationUpdateManyWithoutUserNestedInput,\n      ?   medicationCycles?: MedicationCycleUpdateManyWithoutUserNestedInput,\n      ?   medicationLogs?: MedicationLogUpdateManyWithoutUserNestedInput,\n      ?   metrics?: MetricUpdateManyWithoutUserNestedInput,\n      ?   notifications?: NotificationUpdateManyWithoutUserNestedInput,\n      ?   screeningResults?: ScreeningResultUpdateManyWithoutUserNestedInput,\n      ?   user_medication_cycles?: user_medication_cyclesUpdateManyWithoutUserNestedInput\n        }\n      })\n\nUnknown argument `loginAttempts`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async exports.login (/Users/AlexanderSokol/medtrack/backend/src/controllers/authController.js:316:5)","timestamp":"2025-09-28T10:51:14.420Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:00:54.953Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:00:54.958Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:00.256Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:00.261Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:02.863Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:02.870Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:09.023Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:09.028Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:11.536Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:05:11.547Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:14:31.851Z"}
{"clientVersion":"5.22.0","level":"error","message":"Error getting user metrics: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.","name":"PrismaClientValidationError","service":"medtrack-security","stack":"PrismaClientValidationError: \nInvalid `prisma.metric.findMany()` invocation in\n/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:43\n\n  54 const userId = req.user.id;\n  55 const prisma = req.prisma;\n  56 \n→ 57 const metrics = await prisma.metric.findMany({\n       where: {\n         userId: \"cmg3kwv6g0000hy8sqjct009l\"\n       },\n       orderBy: {\n         recordedAt: \"desc\",\n         ~~~~~~~~~~\n     ?   id?: SortOrder,\n     ?   name?: SortOrder,\n     ?   value?: SortOrder,\n     ?   unit?: SortOrder,\n     ?   userId?: SortOrder,\n     ?   date?: SortOrder,\n     ?   createdAt?: SortOrder,\n     ?   updatedAt?: SortOrder,\n     ?   user?: UserOrderByWithRelationInput\n       }\n     })\n\nUnknown argument `recordedAt`. Available options are marked with ?.\n    at wn (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:29:1363)\n    at $n.handleRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6958)\n    at $n.handleAndLogRequestError (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6623)\n    at $n.request (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:121:6307)\n    at async l (/Users/AlexanderSokol/medtrack/backend/node_modules/@prisma/client/runtime/library.js:130:9633)\n    at async getUserMetrics (/Users/AlexanderSokol/medtrack/backend/src/controllers/medicationController.js:57:23)","timestamp":"2025-09-28T11:14:31.857Z"}
