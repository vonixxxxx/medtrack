
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Medication
 * 
 */
export type Medication = $Result.DefaultSelection<Prisma.$MedicationPayload>
/**
 * Model MedicationLog
 * 
 */
export type MedicationLog = $Result.DefaultSelection<Prisma.$MedicationLogPayload>
/**
 * Model Metric
 * 
 */
export type Metric = $Result.DefaultSelection<Prisma.$MetricPayload>
/**
 * Model MedicationCycle
 * 
 */
export type MedicationCycle = $Result.DefaultSelection<Prisma.$MedicationCyclePayload>
/**
 * Model MetricLog
 * 
 */
export type MetricLog = $Result.DefaultSelection<Prisma.$MetricLogPayload>
/**
 * Model DoseLog
 * 
 */
export type DoseLog = $Result.DefaultSelection<Prisma.$DoseLogPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.medication`: Exposes CRUD operations for the **Medication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medications
    * const medications = await prisma.medication.findMany()
    * ```
    */
  get medication(): Prisma.MedicationDelegate<ExtArgs>;

  /**
   * `prisma.medicationLog`: Exposes CRUD operations for the **MedicationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicationLogs
    * const medicationLogs = await prisma.medicationLog.findMany()
    * ```
    */
  get medicationLog(): Prisma.MedicationLogDelegate<ExtArgs>;

  /**
   * `prisma.metric`: Exposes CRUD operations for the **Metric** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Metrics
    * const metrics = await prisma.metric.findMany()
    * ```
    */
  get metric(): Prisma.MetricDelegate<ExtArgs>;

  /**
   * `prisma.medicationCycle`: Exposes CRUD operations for the **MedicationCycle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MedicationCycles
    * const medicationCycles = await prisma.medicationCycle.findMany()
    * ```
    */
  get medicationCycle(): Prisma.MedicationCycleDelegate<ExtArgs>;

  /**
   * `prisma.metricLog`: Exposes CRUD operations for the **MetricLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MetricLogs
    * const metricLogs = await prisma.metricLog.findMany()
    * ```
    */
  get metricLog(): Prisma.MetricLogDelegate<ExtArgs>;

  /**
   * `prisma.doseLog`: Exposes CRUD operations for the **DoseLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DoseLogs
    * const doseLogs = await prisma.doseLog.findMany()
    * ```
    */
  get doseLog(): Prisma.DoseLogDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Medication: 'Medication',
    MedicationLog: 'MedicationLog',
    Metric: 'Metric',
    MedicationCycle: 'MedicationCycle',
    MetricLog: 'MetricLog',
    DoseLog: 'DoseLog',
    Notification: 'Notification'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "medication" | "medicationLog" | "metric" | "medicationCycle" | "metricLog" | "doseLog" | "notification"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Medication: {
        payload: Prisma.$MedicationPayload<ExtArgs>
        fields: Prisma.MedicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findFirst: {
            args: Prisma.MedicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findMany: {
            args: Prisma.MedicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          create: {
            args: Prisma.MedicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          createMany: {
            args: Prisma.MedicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          delete: {
            args: Prisma.MedicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          update: {
            args: Prisma.MedicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          deleteMany: {
            args: Prisma.MedicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          aggregate: {
            args: Prisma.MedicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedication>
          }
          groupBy: {
            args: Prisma.MedicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicationCountArgs<ExtArgs>
            result: $Utils.Optional<MedicationCountAggregateOutputType> | number
          }
        }
      }
      MedicationLog: {
        payload: Prisma.$MedicationLogPayload<ExtArgs>
        fields: Prisma.MedicationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          findFirst: {
            args: Prisma.MedicationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          findMany: {
            args: Prisma.MedicationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>[]
          }
          create: {
            args: Prisma.MedicationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          createMany: {
            args: Prisma.MedicationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicationLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>[]
          }
          delete: {
            args: Prisma.MedicationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          update: {
            args: Prisma.MedicationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          deleteMany: {
            args: Prisma.MedicationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationLogPayload>
          }
          aggregate: {
            args: Prisma.MedicationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicationLog>
          }
          groupBy: {
            args: Prisma.MedicationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicationLogCountArgs<ExtArgs>
            result: $Utils.Optional<MedicationLogCountAggregateOutputType> | number
          }
        }
      }
      Metric: {
        payload: Prisma.$MetricPayload<ExtArgs>
        fields: Prisma.MetricFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findFirst: {
            args: Prisma.MetricFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          findMany: {
            args: Prisma.MetricFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          create: {
            args: Prisma.MetricCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          createMany: {
            args: Prisma.MetricCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>[]
          }
          delete: {
            args: Prisma.MetricDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          update: {
            args: Prisma.MetricUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          deleteMany: {
            args: Prisma.MetricDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MetricUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricPayload>
          }
          aggregate: {
            args: Prisma.MetricAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetric>
          }
          groupBy: {
            args: Prisma.MetricGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricCountArgs<ExtArgs>
            result: $Utils.Optional<MetricCountAggregateOutputType> | number
          }
        }
      }
      MedicationCycle: {
        payload: Prisma.$MedicationCyclePayload<ExtArgs>
        fields: Prisma.MedicationCycleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicationCycleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicationCycleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          findFirst: {
            args: Prisma.MedicationCycleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicationCycleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          findMany: {
            args: Prisma.MedicationCycleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>[]
          }
          create: {
            args: Prisma.MedicationCycleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          createMany: {
            args: Prisma.MedicationCycleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicationCycleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>[]
          }
          delete: {
            args: Prisma.MedicationCycleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          update: {
            args: Prisma.MedicationCycleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          deleteMany: {
            args: Prisma.MedicationCycleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicationCycleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MedicationCycleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationCyclePayload>
          }
          aggregate: {
            args: Prisma.MedicationCycleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedicationCycle>
          }
          groupBy: {
            args: Prisma.MedicationCycleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicationCycleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicationCycleCountArgs<ExtArgs>
            result: $Utils.Optional<MedicationCycleCountAggregateOutputType> | number
          }
        }
      }
      MetricLog: {
        payload: Prisma.$MetricLogPayload<ExtArgs>
        fields: Prisma.MetricLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MetricLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MetricLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          findFirst: {
            args: Prisma.MetricLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MetricLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          findMany: {
            args: Prisma.MetricLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>[]
          }
          create: {
            args: Prisma.MetricLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          createMany: {
            args: Prisma.MetricLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MetricLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>[]
          }
          delete: {
            args: Prisma.MetricLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          update: {
            args: Prisma.MetricLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          deleteMany: {
            args: Prisma.MetricLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MetricLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MetricLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MetricLogPayload>
          }
          aggregate: {
            args: Prisma.MetricLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMetricLog>
          }
          groupBy: {
            args: Prisma.MetricLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<MetricLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.MetricLogCountArgs<ExtArgs>
            result: $Utils.Optional<MetricLogCountAggregateOutputType> | number
          }
        }
      }
      DoseLog: {
        payload: Prisma.$DoseLogPayload<ExtArgs>
        fields: Prisma.DoseLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoseLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoseLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          findFirst: {
            args: Prisma.DoseLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoseLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          findMany: {
            args: Prisma.DoseLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>[]
          }
          create: {
            args: Prisma.DoseLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          createMany: {
            args: Prisma.DoseLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DoseLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>[]
          }
          delete: {
            args: Prisma.DoseLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          update: {
            args: Prisma.DoseLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          deleteMany: {
            args: Prisma.DoseLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DoseLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DoseLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DoseLogPayload>
          }
          aggregate: {
            args: Prisma.DoseLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDoseLog>
          }
          groupBy: {
            args: Prisma.DoseLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<DoseLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoseLogCountArgs<ExtArgs>
            result: $Utils.Optional<DoseLogCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    medications: number
    metrics: number
    cycles: number
    notifications: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medications?: boolean | UserCountOutputTypeCountMedicationsArgs
    metrics?: boolean | UserCountOutputTypeCountMetricsArgs
    cycles?: boolean | UserCountOutputTypeCountCyclesArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCyclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationCycleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Count Type MedicationCountOutputType
   */

  export type MedicationCountOutputType = {
    logs: number
  }

  export type MedicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | MedicationCountOutputTypeCountLogsArgs
  }

  // Custom InputTypes
  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCountOutputType
     */
    select?: MedicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationLogWhereInput
  }


  /**
   * Count Type MedicationCycleCountOutputType
   */

  export type MedicationCycleCountOutputType = {
    metricLogs: number
    doseLogs: number
    notifications: number
  }

  export type MedicationCycleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricLogs?: boolean | MedicationCycleCountOutputTypeCountMetricLogsArgs
    doseLogs?: boolean | MedicationCycleCountOutputTypeCountDoseLogsArgs
    notifications?: boolean | MedicationCycleCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * MedicationCycleCountOutputType without action
   */
  export type MedicationCycleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycleCountOutputType
     */
    select?: MedicationCycleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicationCycleCountOutputType without action
   */
  export type MedicationCycleCountOutputTypeCountMetricLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricLogWhereInput
  }

  /**
   * MedicationCycleCountOutputType without action
   */
  export type MedicationCycleCountOutputTypeCountDoseLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoseLogWhereInput
  }

  /**
   * MedicationCycleCountOutputType without action
   */
  export type MedicationCycleCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    is2FAEnabled: boolean | null
    twoFASecret: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    name: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    is2FAEnabled: boolean | null
    twoFASecret: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    resetToken: number
    resetTokenExpiry: number
    is2FAEnabled: number
    twoFASecret: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    resetToken?: true
    resetTokenExpiry?: true
    is2FAEnabled?: true
    twoFASecret?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    resetToken?: true
    resetTokenExpiry?: true
    is2FAEnabled?: true
    twoFASecret?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    resetToken?: true
    resetTokenExpiry?: true
    is2FAEnabled?: true
    twoFASecret?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    name: string | null
    resetToken: string | null
    resetTokenExpiry: Date | null
    is2FAEnabled: boolean
    twoFASecret: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    is2FAEnabled?: boolean
    twoFASecret?: boolean
    medications?: boolean | User$medicationsArgs<ExtArgs>
    metrics?: boolean | User$metricsArgs<ExtArgs>
    cycles?: boolean | User$cyclesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    is2FAEnabled?: boolean
    twoFASecret?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    resetToken?: boolean
    resetTokenExpiry?: boolean
    is2FAEnabled?: boolean
    twoFASecret?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medications?: boolean | User$medicationsArgs<ExtArgs>
    metrics?: boolean | User$metricsArgs<ExtArgs>
    cycles?: boolean | User$cyclesArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      medications: Prisma.$MedicationPayload<ExtArgs>[]
      metrics: Prisma.$MetricPayload<ExtArgs>[]
      cycles: Prisma.$MedicationCyclePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      name: string | null
      resetToken: string | null
      resetTokenExpiry: Date | null
      is2FAEnabled: boolean
      twoFASecret: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medications<T extends User$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany"> | Null>
    metrics<T extends User$metricsArgs<ExtArgs> = {}>(args?: Subset<T, User$metricsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findMany"> | Null>
    cycles<T extends User$cyclesArgs<ExtArgs> = {}>(args?: Subset<T, User$cyclesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly resetToken: FieldRef<"User", 'String'>
    readonly resetTokenExpiry: FieldRef<"User", 'DateTime'>
    readonly is2FAEnabled: FieldRef<"User", 'Boolean'>
    readonly twoFASecret: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.medications
   */
  export type User$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    cursor?: MedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * User.metrics
   */
  export type User$metricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    where?: MetricWhereInput
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    cursor?: MetricWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * User.cycles
   */
  export type User$cyclesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    where?: MedicationCycleWhereInput
    orderBy?: MedicationCycleOrderByWithRelationInput | MedicationCycleOrderByWithRelationInput[]
    cursor?: MedicationCycleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicationCycleScalarFieldEnum | MedicationCycleScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Medication
   */

  export type AggregateMedication = {
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  export type MedicationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MedicationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type MedicationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    dosage: string | null
    frequency: string | null
  }

  export type MedicationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    startDate: Date | null
    endDate: Date | null
    dosage: string | null
    frequency: string | null
  }

  export type MedicationCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    startDate: number
    endDate: number
    dosage: number
    frequency: number
    _all: number
  }


  export type MedicationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MedicationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type MedicationMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    startDate?: true
    endDate?: true
    dosage?: true
    frequency?: true
  }

  export type MedicationMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    startDate?: true
    endDate?: true
    dosage?: true
    frequency?: true
  }

  export type MedicationCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    startDate?: true
    endDate?: true
    dosage?: true
    frequency?: true
    _all?: true
  }

  export type MedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medication to aggregate.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medications
    **/
    _count?: true | MedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationMaxAggregateInputType
  }

  export type GetMedicationAggregateType<T extends MedicationAggregateArgs> = {
        [P in keyof T & keyof AggregateMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedication[P]>
      : GetScalarType<T[P], AggregateMedication[P]>
  }




  export type MedicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithAggregationInput | MedicationOrderByWithAggregationInput[]
    by: MedicationScalarFieldEnum[] | MedicationScalarFieldEnum
    having?: MedicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationCountAggregateInputType | true
    _avg?: MedicationAvgAggregateInputType
    _sum?: MedicationSumAggregateInputType
    _min?: MedicationMinAggregateInputType
    _max?: MedicationMaxAggregateInputType
  }

  export type MedicationGroupByOutputType = {
    id: number
    userId: number
    name: string
    startDate: Date
    endDate: Date
    dosage: string
    frequency: string
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  type GetMedicationGroupByPayload<T extends MedicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationGroupByOutputType[P]>
        }
      >
    >


  export type MedicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    dosage?: boolean
    frequency?: boolean
    logs?: boolean | Medication$logsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    dosage?: boolean
    frequency?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    startDate?: boolean
    endDate?: boolean
    dosage?: boolean
    frequency?: boolean
  }

  export type MedicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    logs?: boolean | Medication$logsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MedicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medication"
    objects: {
      logs: Prisma.$MedicationLogPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      name: string
      startDate: Date
      endDate: Date
      dosage: string
      frequency: string
    }, ExtArgs["result"]["medication"]>
    composites: {}
  }

  type MedicationGetPayload<S extends boolean | null | undefined | MedicationDefaultArgs> = $Result.GetResult<Prisma.$MedicationPayload, S>

  type MedicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicationCountAggregateInputType | true
    }

  export interface MedicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medication'], meta: { name: 'Medication' } }
    /**
     * Find zero or one Medication that matches the filter.
     * @param {MedicationFindUniqueArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicationFindUniqueArgs>(args: SelectSubset<T, MedicationFindUniqueArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Medication that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicationFindUniqueOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicationFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Medication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicationFindFirstArgs>(args?: SelectSubset<T, MedicationFindFirstArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Medication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicationFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Medications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medications
     * const medications = await prisma.medication.findMany()
     * 
     * // Get first 10 Medications
     * const medications = await prisma.medication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicationWithIdOnly = await prisma.medication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicationFindManyArgs>(args?: SelectSubset<T, MedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Medication.
     * @param {MedicationCreateArgs} args - Arguments to create a Medication.
     * @example
     * // Create one Medication
     * const Medication = await prisma.medication.create({
     *   data: {
     *     // ... data to create a Medication
     *   }
     * })
     * 
     */
    create<T extends MedicationCreateArgs>(args: SelectSubset<T, MedicationCreateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Medications.
     * @param {MedicationCreateManyArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicationCreateManyArgs>(args?: SelectSubset<T, MedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medications and returns the data saved in the database.
     * @param {MedicationCreateManyAndReturnArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medications and only return the `id`
     * const medicationWithIdOnly = await prisma.medication.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicationCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Medication.
     * @param {MedicationDeleteArgs} args - Arguments to delete one Medication.
     * @example
     * // Delete one Medication
     * const Medication = await prisma.medication.delete({
     *   where: {
     *     // ... filter to delete one Medication
     *   }
     * })
     * 
     */
    delete<T extends MedicationDeleteArgs>(args: SelectSubset<T, MedicationDeleteArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Medication.
     * @param {MedicationUpdateArgs} args - Arguments to update one Medication.
     * @example
     * // Update one Medication
     * const medication = await prisma.medication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicationUpdateArgs>(args: SelectSubset<T, MedicationUpdateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Medications.
     * @param {MedicationDeleteManyArgs} args - Arguments to filter Medications to delete.
     * @example
     * // Delete a few Medications
     * const { count } = await prisma.medication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicationDeleteManyArgs>(args?: SelectSubset<T, MedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicationUpdateManyArgs>(args: SelectSubset<T, MedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Medication.
     * @param {MedicationUpsertArgs} args - Arguments to update or create a Medication.
     * @example
     * // Update or create a Medication
     * const medication = await prisma.medication.upsert({
     *   create: {
     *     // ... data to create a Medication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medication we want to update
     *   }
     * })
     */
    upsert<T extends MedicationUpsertArgs>(args: SelectSubset<T, MedicationUpsertArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCountArgs} args - Arguments to filter Medications to count.
     * @example
     * // Count the number of Medications
     * const count = await prisma.medication.count({
     *   where: {
     *     // ... the filter for the Medications we want to count
     *   }
     * })
    **/
    count<T extends MedicationCountArgs>(
      args?: Subset<T, MedicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationAggregateArgs>(args: Subset<T, MedicationAggregateArgs>): Prisma.PrismaPromise<GetMedicationAggregateType<T>>

    /**
     * Group by Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationGroupByArgs['orderBy'] }
        : { orderBy?: MedicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medication model
   */
  readonly fields: MedicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    logs<T extends Medication$logsArgs<ExtArgs> = {}>(args?: Subset<T, Medication$logsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medication model
   */ 
  interface MedicationFieldRefs {
    readonly id: FieldRef<"Medication", 'Int'>
    readonly userId: FieldRef<"Medication", 'Int'>
    readonly name: FieldRef<"Medication", 'String'>
    readonly startDate: FieldRef<"Medication", 'DateTime'>
    readonly endDate: FieldRef<"Medication", 'DateTime'>
    readonly dosage: FieldRef<"Medication", 'String'>
    readonly frequency: FieldRef<"Medication", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Medication findUnique
   */
  export type MedicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findUniqueOrThrow
   */
  export type MedicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findFirst
   */
  export type MedicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findFirstOrThrow
   */
  export type MedicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findMany
   */
  export type MedicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medications to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication create
   */
  export type MedicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Medication.
     */
    data: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
  }

  /**
   * Medication createMany
   */
  export type MedicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
  }

  /**
   * Medication createManyAndReturn
   */
  export type MedicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medication update
   */
  export type MedicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Medication.
     */
    data: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
    /**
     * Choose, which Medication to update.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication updateMany
   */
  export type MedicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medications.
     */
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyInput>
    /**
     * Filter which Medications to update
     */
    where?: MedicationWhereInput
  }

  /**
   * Medication upsert
   */
  export type MedicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Medication to update in case it exists.
     */
    where: MedicationWhereUniqueInput
    /**
     * In case the Medication found by the `where` argument doesn't exist, create a new Medication with this data.
     */
    create: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
    /**
     * In case the Medication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
  }

  /**
   * Medication delete
   */
  export type MedicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter which Medication to delete.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication deleteMany
   */
  export type MedicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medications to delete
     */
    where?: MedicationWhereInput
  }

  /**
   * Medication.logs
   */
  export type Medication$logsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    where?: MedicationLogWhereInput
    orderBy?: MedicationLogOrderByWithRelationInput | MedicationLogOrderByWithRelationInput[]
    cursor?: MedicationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicationLogScalarFieldEnum | MedicationLogScalarFieldEnum[]
  }

  /**
   * Medication without action
   */
  export type MedicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
  }


  /**
   * Model MedicationLog
   */

  export type AggregateMedicationLog = {
    _count: MedicationLogCountAggregateOutputType | null
    _avg: MedicationLogAvgAggregateOutputType | null
    _sum: MedicationLogSumAggregateOutputType | null
    _min: MedicationLogMinAggregateOutputType | null
    _max: MedicationLogMaxAggregateOutputType | null
  }

  export type MedicationLogAvgAggregateOutputType = {
    id: number | null
    medicationId: number | null
  }

  export type MedicationLogSumAggregateOutputType = {
    id: number | null
    medicationId: number | null
  }

  export type MedicationLogMinAggregateOutputType = {
    id: number | null
    medicationId: number | null
    date: Date | null
    dosage: string | null
  }

  export type MedicationLogMaxAggregateOutputType = {
    id: number | null
    medicationId: number | null
    date: Date | null
    dosage: string | null
  }

  export type MedicationLogCountAggregateOutputType = {
    id: number
    medicationId: number
    date: number
    dosage: number
    _all: number
  }


  export type MedicationLogAvgAggregateInputType = {
    id?: true
    medicationId?: true
  }

  export type MedicationLogSumAggregateInputType = {
    id?: true
    medicationId?: true
  }

  export type MedicationLogMinAggregateInputType = {
    id?: true
    medicationId?: true
    date?: true
    dosage?: true
  }

  export type MedicationLogMaxAggregateInputType = {
    id?: true
    medicationId?: true
    date?: true
    dosage?: true
  }

  export type MedicationLogCountAggregateInputType = {
    id?: true
    medicationId?: true
    date?: true
    dosage?: true
    _all?: true
  }

  export type MedicationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicationLog to aggregate.
     */
    where?: MedicationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationLogs to fetch.
     */
    orderBy?: MedicationLogOrderByWithRelationInput | MedicationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicationLogs
    **/
    _count?: true | MedicationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicationLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicationLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationLogMaxAggregateInputType
  }

  export type GetMedicationLogAggregateType<T extends MedicationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicationLog[P]>
      : GetScalarType<T[P], AggregateMedicationLog[P]>
  }




  export type MedicationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationLogWhereInput
    orderBy?: MedicationLogOrderByWithAggregationInput | MedicationLogOrderByWithAggregationInput[]
    by: MedicationLogScalarFieldEnum[] | MedicationLogScalarFieldEnum
    having?: MedicationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationLogCountAggregateInputType | true
    _avg?: MedicationLogAvgAggregateInputType
    _sum?: MedicationLogSumAggregateInputType
    _min?: MedicationLogMinAggregateInputType
    _max?: MedicationLogMaxAggregateInputType
  }

  export type MedicationLogGroupByOutputType = {
    id: number
    medicationId: number
    date: Date
    dosage: string
    _count: MedicationLogCountAggregateOutputType | null
    _avg: MedicationLogAvgAggregateOutputType | null
    _sum: MedicationLogSumAggregateOutputType | null
    _min: MedicationLogMinAggregateOutputType | null
    _max: MedicationLogMaxAggregateOutputType | null
  }

  type GetMedicationLogGroupByPayload<T extends MedicationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationLogGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationLogGroupByOutputType[P]>
        }
      >
    >


  export type MedicationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    date?: boolean
    dosage?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicationLog"]>

  export type MedicationLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    date?: boolean
    dosage?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicationLog"]>

  export type MedicationLogSelectScalar = {
    id?: boolean
    medicationId?: boolean
    date?: boolean
    dosage?: boolean
  }

  export type MedicationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }
  export type MedicationLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }

  export type $MedicationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicationLog"
    objects: {
      medication: Prisma.$MedicationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      medicationId: number
      date: Date
      dosage: string
    }, ExtArgs["result"]["medicationLog"]>
    composites: {}
  }

  type MedicationLogGetPayload<S extends boolean | null | undefined | MedicationLogDefaultArgs> = $Result.GetResult<Prisma.$MedicationLogPayload, S>

  type MedicationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicationLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicationLogCountAggregateInputType | true
    }

  export interface MedicationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicationLog'], meta: { name: 'MedicationLog' } }
    /**
     * Find zero or one MedicationLog that matches the filter.
     * @param {MedicationLogFindUniqueArgs} args - Arguments to find a MedicationLog
     * @example
     * // Get one MedicationLog
     * const medicationLog = await prisma.medicationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicationLogFindUniqueArgs>(args: SelectSubset<T, MedicationLogFindUniqueArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MedicationLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicationLogFindUniqueOrThrowArgs} args - Arguments to find a MedicationLog
     * @example
     * // Get one MedicationLog
     * const medicationLog = await prisma.medicationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MedicationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogFindFirstArgs} args - Arguments to find a MedicationLog
     * @example
     * // Get one MedicationLog
     * const medicationLog = await prisma.medicationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicationLogFindFirstArgs>(args?: SelectSubset<T, MedicationLogFindFirstArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MedicationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogFindFirstOrThrowArgs} args - Arguments to find a MedicationLog
     * @example
     * // Get one MedicationLog
     * const medicationLog = await prisma.medicationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MedicationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicationLogs
     * const medicationLogs = await prisma.medicationLog.findMany()
     * 
     * // Get first 10 MedicationLogs
     * const medicationLogs = await prisma.medicationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicationLogWithIdOnly = await prisma.medicationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicationLogFindManyArgs>(args?: SelectSubset<T, MedicationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MedicationLog.
     * @param {MedicationLogCreateArgs} args - Arguments to create a MedicationLog.
     * @example
     * // Create one MedicationLog
     * const MedicationLog = await prisma.medicationLog.create({
     *   data: {
     *     // ... data to create a MedicationLog
     *   }
     * })
     * 
     */
    create<T extends MedicationLogCreateArgs>(args: SelectSubset<T, MedicationLogCreateArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MedicationLogs.
     * @param {MedicationLogCreateManyArgs} args - Arguments to create many MedicationLogs.
     * @example
     * // Create many MedicationLogs
     * const medicationLog = await prisma.medicationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicationLogCreateManyArgs>(args?: SelectSubset<T, MedicationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicationLogs and returns the data saved in the database.
     * @param {MedicationLogCreateManyAndReturnArgs} args - Arguments to create many MedicationLogs.
     * @example
     * // Create many MedicationLogs
     * const medicationLog = await prisma.medicationLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicationLogs and only return the `id`
     * const medicationLogWithIdOnly = await prisma.medicationLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicationLogCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MedicationLog.
     * @param {MedicationLogDeleteArgs} args - Arguments to delete one MedicationLog.
     * @example
     * // Delete one MedicationLog
     * const MedicationLog = await prisma.medicationLog.delete({
     *   where: {
     *     // ... filter to delete one MedicationLog
     *   }
     * })
     * 
     */
    delete<T extends MedicationLogDeleteArgs>(args: SelectSubset<T, MedicationLogDeleteArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MedicationLog.
     * @param {MedicationLogUpdateArgs} args - Arguments to update one MedicationLog.
     * @example
     * // Update one MedicationLog
     * const medicationLog = await prisma.medicationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicationLogUpdateArgs>(args: SelectSubset<T, MedicationLogUpdateArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MedicationLogs.
     * @param {MedicationLogDeleteManyArgs} args - Arguments to filter MedicationLogs to delete.
     * @example
     * // Delete a few MedicationLogs
     * const { count } = await prisma.medicationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicationLogDeleteManyArgs>(args?: SelectSubset<T, MedicationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicationLogs
     * const medicationLog = await prisma.medicationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicationLogUpdateManyArgs>(args: SelectSubset<T, MedicationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicationLog.
     * @param {MedicationLogUpsertArgs} args - Arguments to update or create a MedicationLog.
     * @example
     * // Update or create a MedicationLog
     * const medicationLog = await prisma.medicationLog.upsert({
     *   create: {
     *     // ... data to create a MedicationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicationLog we want to update
     *   }
     * })
     */
    upsert<T extends MedicationLogUpsertArgs>(args: SelectSubset<T, MedicationLogUpsertArgs<ExtArgs>>): Prisma__MedicationLogClient<$Result.GetResult<Prisma.$MedicationLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MedicationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogCountArgs} args - Arguments to filter MedicationLogs to count.
     * @example
     * // Count the number of MedicationLogs
     * const count = await prisma.medicationLog.count({
     *   where: {
     *     // ... the filter for the MedicationLogs we want to count
     *   }
     * })
    **/
    count<T extends MedicationLogCountArgs>(
      args?: Subset<T, MedicationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationLogAggregateArgs>(args: Subset<T, MedicationLogAggregateArgs>): Prisma.PrismaPromise<GetMedicationLogAggregateType<T>>

    /**
     * Group by MedicationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationLogGroupByArgs['orderBy'] }
        : { orderBy?: MedicationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicationLog model
   */
  readonly fields: MedicationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medication<T extends MedicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationDefaultArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicationLog model
   */ 
  interface MedicationLogFieldRefs {
    readonly id: FieldRef<"MedicationLog", 'Int'>
    readonly medicationId: FieldRef<"MedicationLog", 'Int'>
    readonly date: FieldRef<"MedicationLog", 'DateTime'>
    readonly dosage: FieldRef<"MedicationLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MedicationLog findUnique
   */
  export type MedicationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter, which MedicationLog to fetch.
     */
    where: MedicationLogWhereUniqueInput
  }

  /**
   * MedicationLog findUniqueOrThrow
   */
  export type MedicationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter, which MedicationLog to fetch.
     */
    where: MedicationLogWhereUniqueInput
  }

  /**
   * MedicationLog findFirst
   */
  export type MedicationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter, which MedicationLog to fetch.
     */
    where?: MedicationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationLogs to fetch.
     */
    orderBy?: MedicationLogOrderByWithRelationInput | MedicationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicationLogs.
     */
    cursor?: MedicationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicationLogs.
     */
    distinct?: MedicationLogScalarFieldEnum | MedicationLogScalarFieldEnum[]
  }

  /**
   * MedicationLog findFirstOrThrow
   */
  export type MedicationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter, which MedicationLog to fetch.
     */
    where?: MedicationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationLogs to fetch.
     */
    orderBy?: MedicationLogOrderByWithRelationInput | MedicationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicationLogs.
     */
    cursor?: MedicationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicationLogs.
     */
    distinct?: MedicationLogScalarFieldEnum | MedicationLogScalarFieldEnum[]
  }

  /**
   * MedicationLog findMany
   */
  export type MedicationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter, which MedicationLogs to fetch.
     */
    where?: MedicationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationLogs to fetch.
     */
    orderBy?: MedicationLogOrderByWithRelationInput | MedicationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicationLogs.
     */
    cursor?: MedicationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationLogs.
     */
    skip?: number
    distinct?: MedicationLogScalarFieldEnum | MedicationLogScalarFieldEnum[]
  }

  /**
   * MedicationLog create
   */
  export type MedicationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicationLog.
     */
    data: XOR<MedicationLogCreateInput, MedicationLogUncheckedCreateInput>
  }

  /**
   * MedicationLog createMany
   */
  export type MedicationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicationLogs.
     */
    data: MedicationLogCreateManyInput | MedicationLogCreateManyInput[]
  }

  /**
   * MedicationLog createManyAndReturn
   */
  export type MedicationLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MedicationLogs.
     */
    data: MedicationLogCreateManyInput | MedicationLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicationLog update
   */
  export type MedicationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicationLog.
     */
    data: XOR<MedicationLogUpdateInput, MedicationLogUncheckedUpdateInput>
    /**
     * Choose, which MedicationLog to update.
     */
    where: MedicationLogWhereUniqueInput
  }

  /**
   * MedicationLog updateMany
   */
  export type MedicationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicationLogs.
     */
    data: XOR<MedicationLogUpdateManyMutationInput, MedicationLogUncheckedUpdateManyInput>
    /**
     * Filter which MedicationLogs to update
     */
    where?: MedicationLogWhereInput
  }

  /**
   * MedicationLog upsert
   */
  export type MedicationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicationLog to update in case it exists.
     */
    where: MedicationLogWhereUniqueInput
    /**
     * In case the MedicationLog found by the `where` argument doesn't exist, create a new MedicationLog with this data.
     */
    create: XOR<MedicationLogCreateInput, MedicationLogUncheckedCreateInput>
    /**
     * In case the MedicationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicationLogUpdateInput, MedicationLogUncheckedUpdateInput>
  }

  /**
   * MedicationLog delete
   */
  export type MedicationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
    /**
     * Filter which MedicationLog to delete.
     */
    where: MedicationLogWhereUniqueInput
  }

  /**
   * MedicationLog deleteMany
   */
  export type MedicationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicationLogs to delete
     */
    where?: MedicationLogWhereInput
  }

  /**
   * MedicationLog without action
   */
  export type MedicationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationLog
     */
    select?: MedicationLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationLogInclude<ExtArgs> | null
  }


  /**
   * Model Metric
   */

  export type AggregateMetric = {
    _count: MetricCountAggregateOutputType | null
    _avg: MetricAvgAggregateOutputType | null
    _sum: MetricSumAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  export type MetricAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    weight: number | null
    height: number | null
    bmi: number | null
    hipCircumference: number | null
  }

  export type MetricSumAggregateOutputType = {
    id: number | null
    userId: number | null
    weight: number | null
    height: number | null
    bmi: number | null
    hipCircumference: number | null
  }

  export type MetricMinAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    weight: number | null
    height: number | null
    bmi: number | null
    bloodPressure: string | null
    hipCircumference: number | null
  }

  export type MetricMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    date: Date | null
    weight: number | null
    height: number | null
    bmi: number | null
    bloodPressure: string | null
    hipCircumference: number | null
  }

  export type MetricCountAggregateOutputType = {
    id: number
    userId: number
    date: number
    weight: number
    height: number
    bmi: number
    bloodPressure: number
    hipCircumference: number
    _all: number
  }


  export type MetricAvgAggregateInputType = {
    id?: true
    userId?: true
    weight?: true
    height?: true
    bmi?: true
    hipCircumference?: true
  }

  export type MetricSumAggregateInputType = {
    id?: true
    userId?: true
    weight?: true
    height?: true
    bmi?: true
    hipCircumference?: true
  }

  export type MetricMinAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    weight?: true
    height?: true
    bmi?: true
    bloodPressure?: true
    hipCircumference?: true
  }

  export type MetricMaxAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    weight?: true
    height?: true
    bmi?: true
    bloodPressure?: true
    hipCircumference?: true
  }

  export type MetricCountAggregateInputType = {
    id?: true
    userId?: true
    date?: true
    weight?: true
    height?: true
    bmi?: true
    bloodPressure?: true
    hipCircumference?: true
    _all?: true
  }

  export type MetricAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metric to aggregate.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Metrics
    **/
    _count?: true | MetricCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetricAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetricSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricMaxAggregateInputType
  }

  export type GetMetricAggregateType<T extends MetricAggregateArgs> = {
        [P in keyof T & keyof AggregateMetric]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetric[P]>
      : GetScalarType<T[P], AggregateMetric[P]>
  }




  export type MetricGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricWhereInput
    orderBy?: MetricOrderByWithAggregationInput | MetricOrderByWithAggregationInput[]
    by: MetricScalarFieldEnum[] | MetricScalarFieldEnum
    having?: MetricScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricCountAggregateInputType | true
    _avg?: MetricAvgAggregateInputType
    _sum?: MetricSumAggregateInputType
    _min?: MetricMinAggregateInputType
    _max?: MetricMaxAggregateInputType
  }

  export type MetricGroupByOutputType = {
    id: number
    userId: number
    date: Date
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference: number | null
    _count: MetricCountAggregateOutputType | null
    _avg: MetricAvgAggregateOutputType | null
    _sum: MetricSumAggregateOutputType | null
    _min: MetricMinAggregateOutputType | null
    _max: MetricMaxAggregateOutputType | null
  }

  type GetMetricGroupByPayload<T extends MetricGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricGroupByOutputType[P]>
            : GetScalarType<T[P], MetricGroupByOutputType[P]>
        }
      >
    >


  export type MetricSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    weight?: boolean
    height?: boolean
    bmi?: boolean
    bloodPressure?: boolean
    hipCircumference?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    date?: boolean
    weight?: boolean
    height?: boolean
    bmi?: boolean
    bloodPressure?: boolean
    hipCircumference?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metric"]>

  export type MetricSelectScalar = {
    id?: boolean
    userId?: boolean
    date?: boolean
    weight?: boolean
    height?: boolean
    bmi?: boolean
    bloodPressure?: boolean
    hipCircumference?: boolean
  }

  export type MetricInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MetricIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MetricPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Metric"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      date: Date
      weight: number
      height: number
      bmi: number
      bloodPressure: string
      hipCircumference: number | null
    }, ExtArgs["result"]["metric"]>
    composites: {}
  }

  type MetricGetPayload<S extends boolean | null | undefined | MetricDefaultArgs> = $Result.GetResult<Prisma.$MetricPayload, S>

  type MetricCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetricFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetricCountAggregateInputType | true
    }

  export interface MetricDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Metric'], meta: { name: 'Metric' } }
    /**
     * Find zero or one Metric that matches the filter.
     * @param {MetricFindUniqueArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricFindUniqueArgs>(args: SelectSubset<T, MetricFindUniqueArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Metric that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MetricFindUniqueOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Metric that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricFindFirstArgs>(args?: SelectSubset<T, MetricFindFirstArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Metric that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindFirstOrThrowArgs} args - Arguments to find a Metric
     * @example
     * // Get one Metric
     * const metric = await prisma.metric.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Metrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Metrics
     * const metrics = await prisma.metric.findMany()
     * 
     * // Get first 10 Metrics
     * const metrics = await prisma.metric.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricWithIdOnly = await prisma.metric.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricFindManyArgs>(args?: SelectSubset<T, MetricFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Metric.
     * @param {MetricCreateArgs} args - Arguments to create a Metric.
     * @example
     * // Create one Metric
     * const Metric = await prisma.metric.create({
     *   data: {
     *     // ... data to create a Metric
     *   }
     * })
     * 
     */
    create<T extends MetricCreateArgs>(args: SelectSubset<T, MetricCreateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Metrics.
     * @param {MetricCreateManyArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricCreateManyArgs>(args?: SelectSubset<T, MetricCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Metrics and returns the data saved in the database.
     * @param {MetricCreateManyAndReturnArgs} args - Arguments to create many Metrics.
     * @example
     * // Create many Metrics
     * const metric = await prisma.metric.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Metrics and only return the `id`
     * const metricWithIdOnly = await prisma.metric.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Metric.
     * @param {MetricDeleteArgs} args - Arguments to delete one Metric.
     * @example
     * // Delete one Metric
     * const Metric = await prisma.metric.delete({
     *   where: {
     *     // ... filter to delete one Metric
     *   }
     * })
     * 
     */
    delete<T extends MetricDeleteArgs>(args: SelectSubset<T, MetricDeleteArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Metric.
     * @param {MetricUpdateArgs} args - Arguments to update one Metric.
     * @example
     * // Update one Metric
     * const metric = await prisma.metric.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricUpdateArgs>(args: SelectSubset<T, MetricUpdateArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Metrics.
     * @param {MetricDeleteManyArgs} args - Arguments to filter Metrics to delete.
     * @example
     * // Delete a few Metrics
     * const { count } = await prisma.metric.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricDeleteManyArgs>(args?: SelectSubset<T, MetricDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Metrics
     * const metric = await prisma.metric.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricUpdateManyArgs>(args: SelectSubset<T, MetricUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Metric.
     * @param {MetricUpsertArgs} args - Arguments to update or create a Metric.
     * @example
     * // Update or create a Metric
     * const metric = await prisma.metric.upsert({
     *   create: {
     *     // ... data to create a Metric
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Metric we want to update
     *   }
     * })
     */
    upsert<T extends MetricUpsertArgs>(args: SelectSubset<T, MetricUpsertArgs<ExtArgs>>): Prisma__MetricClient<$Result.GetResult<Prisma.$MetricPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Metrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricCountArgs} args - Arguments to filter Metrics to count.
     * @example
     * // Count the number of Metrics
     * const count = await prisma.metric.count({
     *   where: {
     *     // ... the filter for the Metrics we want to count
     *   }
     * })
    **/
    count<T extends MetricCountArgs>(
      args?: Subset<T, MetricCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricAggregateArgs>(args: Subset<T, MetricAggregateArgs>): Prisma.PrismaPromise<GetMetricAggregateType<T>>

    /**
     * Group by Metric.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricGroupByArgs['orderBy'] }
        : { orderBy?: MetricGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Metric model
   */
  readonly fields: MetricFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Metric.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Metric model
   */ 
  interface MetricFieldRefs {
    readonly id: FieldRef<"Metric", 'Int'>
    readonly userId: FieldRef<"Metric", 'Int'>
    readonly date: FieldRef<"Metric", 'DateTime'>
    readonly weight: FieldRef<"Metric", 'Float'>
    readonly height: FieldRef<"Metric", 'Float'>
    readonly bmi: FieldRef<"Metric", 'Float'>
    readonly bloodPressure: FieldRef<"Metric", 'String'>
    readonly hipCircumference: FieldRef<"Metric", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Metric findUnique
   */
  export type MetricFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findUniqueOrThrow
   */
  export type MetricFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric findFirst
   */
  export type MetricFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findFirstOrThrow
   */
  export type MetricFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metric to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Metrics.
     */
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric findMany
   */
  export type MetricFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter, which Metrics to fetch.
     */
    where?: MetricWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Metrics to fetch.
     */
    orderBy?: MetricOrderByWithRelationInput | MetricOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Metrics.
     */
    cursor?: MetricWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Metrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Metrics.
     */
    skip?: number
    distinct?: MetricScalarFieldEnum | MetricScalarFieldEnum[]
  }

  /**
   * Metric create
   */
  export type MetricCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The data needed to create a Metric.
     */
    data: XOR<MetricCreateInput, MetricUncheckedCreateInput>
  }

  /**
   * Metric createMany
   */
  export type MetricCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
  }

  /**
   * Metric createManyAndReturn
   */
  export type MetricCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Metrics.
     */
    data: MetricCreateManyInput | MetricCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Metric update
   */
  export type MetricUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The data needed to update a Metric.
     */
    data: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
    /**
     * Choose, which Metric to update.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric updateMany
   */
  export type MetricUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Metrics.
     */
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyInput>
    /**
     * Filter which Metrics to update
     */
    where?: MetricWhereInput
  }

  /**
   * Metric upsert
   */
  export type MetricUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * The filter to search for the Metric to update in case it exists.
     */
    where: MetricWhereUniqueInput
    /**
     * In case the Metric found by the `where` argument doesn't exist, create a new Metric with this data.
     */
    create: XOR<MetricCreateInput, MetricUncheckedCreateInput>
    /**
     * In case the Metric was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricUpdateInput, MetricUncheckedUpdateInput>
  }

  /**
   * Metric delete
   */
  export type MetricDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
    /**
     * Filter which Metric to delete.
     */
    where: MetricWhereUniqueInput
  }

  /**
   * Metric deleteMany
   */
  export type MetricDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Metrics to delete
     */
    where?: MetricWhereInput
  }

  /**
   * Metric without action
   */
  export type MetricDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Metric
     */
    select?: MetricSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricInclude<ExtArgs> | null
  }


  /**
   * Model MedicationCycle
   */

  export type AggregateMedicationCycle = {
    _count: MedicationCycleCountAggregateOutputType | null
    _avg: MedicationCycleAvgAggregateOutputType | null
    _sum: MedicationCycleSumAggregateOutputType | null
    _min: MedicationCycleMinAggregateOutputType | null
    _max: MedicationCycleMaxAggregateOutputType | null
  }

  export type MedicationCycleAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    frequencyDays: number | null
    dosesPerDay: number | null
  }

  export type MedicationCycleSumAggregateOutputType = {
    id: number | null
    userId: number | null
    frequencyDays: number | null
    dosesPerDay: number | null
  }

  export type MedicationCycleMinAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    dosage: string | null
    startDate: Date | null
    endDate: Date | null
    frequencyDays: number | null
    dosesPerDay: number | null
    metricsToMonitor: string | null
  }

  export type MedicationCycleMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    name: string | null
    dosage: string | null
    startDate: Date | null
    endDate: Date | null
    frequencyDays: number | null
    dosesPerDay: number | null
    metricsToMonitor: string | null
  }

  export type MedicationCycleCountAggregateOutputType = {
    id: number
    userId: number
    name: number
    dosage: number
    startDate: number
    endDate: number
    frequencyDays: number
    dosesPerDay: number
    metricsToMonitor: number
    _all: number
  }


  export type MedicationCycleAvgAggregateInputType = {
    id?: true
    userId?: true
    frequencyDays?: true
    dosesPerDay?: true
  }

  export type MedicationCycleSumAggregateInputType = {
    id?: true
    userId?: true
    frequencyDays?: true
    dosesPerDay?: true
  }

  export type MedicationCycleMinAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dosage?: true
    startDate?: true
    endDate?: true
    frequencyDays?: true
    dosesPerDay?: true
    metricsToMonitor?: true
  }

  export type MedicationCycleMaxAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dosage?: true
    startDate?: true
    endDate?: true
    frequencyDays?: true
    dosesPerDay?: true
    metricsToMonitor?: true
  }

  export type MedicationCycleCountAggregateInputType = {
    id?: true
    userId?: true
    name?: true
    dosage?: true
    startDate?: true
    endDate?: true
    frequencyDays?: true
    dosesPerDay?: true
    metricsToMonitor?: true
    _all?: true
  }

  export type MedicationCycleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicationCycle to aggregate.
     */
    where?: MedicationCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationCycles to fetch.
     */
    orderBy?: MedicationCycleOrderByWithRelationInput | MedicationCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicationCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MedicationCycles
    **/
    _count?: true | MedicationCycleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicationCycleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicationCycleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationCycleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationCycleMaxAggregateInputType
  }

  export type GetMedicationCycleAggregateType<T extends MedicationCycleAggregateArgs> = {
        [P in keyof T & keyof AggregateMedicationCycle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedicationCycle[P]>
      : GetScalarType<T[P], AggregateMedicationCycle[P]>
  }




  export type MedicationCycleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationCycleWhereInput
    orderBy?: MedicationCycleOrderByWithAggregationInput | MedicationCycleOrderByWithAggregationInput[]
    by: MedicationCycleScalarFieldEnum[] | MedicationCycleScalarFieldEnum
    having?: MedicationCycleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationCycleCountAggregateInputType | true
    _avg?: MedicationCycleAvgAggregateInputType
    _sum?: MedicationCycleSumAggregateInputType
    _min?: MedicationCycleMinAggregateInputType
    _max?: MedicationCycleMaxAggregateInputType
  }

  export type MedicationCycleGroupByOutputType = {
    id: number
    userId: number
    name: string
    dosage: string
    startDate: Date
    endDate: Date | null
    frequencyDays: number
    dosesPerDay: number
    metricsToMonitor: string | null
    _count: MedicationCycleCountAggregateOutputType | null
    _avg: MedicationCycleAvgAggregateOutputType | null
    _sum: MedicationCycleSumAggregateOutputType | null
    _min: MedicationCycleMinAggregateOutputType | null
    _max: MedicationCycleMaxAggregateOutputType | null
  }

  type GetMedicationCycleGroupByPayload<T extends MedicationCycleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationCycleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationCycleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationCycleGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationCycleGroupByOutputType[P]>
        }
      >
    >


  export type MedicationCycleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    frequencyDays?: boolean
    dosesPerDay?: boolean
    metricsToMonitor?: boolean
    metricLogs?: boolean | MedicationCycle$metricLogsArgs<ExtArgs>
    doseLogs?: boolean | MedicationCycle$doseLogsArgs<ExtArgs>
    notifications?: boolean | MedicationCycle$notificationsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MedicationCycleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicationCycle"]>

  export type MedicationCycleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    name?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    frequencyDays?: boolean
    dosesPerDay?: boolean
    metricsToMonitor?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medicationCycle"]>

  export type MedicationCycleSelectScalar = {
    id?: boolean
    userId?: boolean
    name?: boolean
    dosage?: boolean
    startDate?: boolean
    endDate?: boolean
    frequencyDays?: boolean
    dosesPerDay?: boolean
    metricsToMonitor?: boolean
  }

  export type MedicationCycleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    metricLogs?: boolean | MedicationCycle$metricLogsArgs<ExtArgs>
    doseLogs?: boolean | MedicationCycle$doseLogsArgs<ExtArgs>
    notifications?: boolean | MedicationCycle$notificationsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | MedicationCycleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicationCycleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MedicationCyclePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MedicationCycle"
    objects: {
      metricLogs: Prisma.$MetricLogPayload<ExtArgs>[]
      doseLogs: Prisma.$DoseLogPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      name: string
      dosage: string
      startDate: Date
      endDate: Date | null
      frequencyDays: number
      dosesPerDay: number
      metricsToMonitor: string | null
    }, ExtArgs["result"]["medicationCycle"]>
    composites: {}
  }

  type MedicationCycleGetPayload<S extends boolean | null | undefined | MedicationCycleDefaultArgs> = $Result.GetResult<Prisma.$MedicationCyclePayload, S>

  type MedicationCycleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MedicationCycleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MedicationCycleCountAggregateInputType | true
    }

  export interface MedicationCycleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MedicationCycle'], meta: { name: 'MedicationCycle' } }
    /**
     * Find zero or one MedicationCycle that matches the filter.
     * @param {MedicationCycleFindUniqueArgs} args - Arguments to find a MedicationCycle
     * @example
     * // Get one MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicationCycleFindUniqueArgs>(args: SelectSubset<T, MedicationCycleFindUniqueArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MedicationCycle that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MedicationCycleFindUniqueOrThrowArgs} args - Arguments to find a MedicationCycle
     * @example
     * // Get one MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicationCycleFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationCycleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MedicationCycle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleFindFirstArgs} args - Arguments to find a MedicationCycle
     * @example
     * // Get one MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicationCycleFindFirstArgs>(args?: SelectSubset<T, MedicationCycleFindFirstArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MedicationCycle that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleFindFirstOrThrowArgs} args - Arguments to find a MedicationCycle
     * @example
     * // Get one MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicationCycleFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationCycleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MedicationCycles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MedicationCycles
     * const medicationCycles = await prisma.medicationCycle.findMany()
     * 
     * // Get first 10 MedicationCycles
     * const medicationCycles = await prisma.medicationCycle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicationCycleWithIdOnly = await prisma.medicationCycle.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicationCycleFindManyArgs>(args?: SelectSubset<T, MedicationCycleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MedicationCycle.
     * @param {MedicationCycleCreateArgs} args - Arguments to create a MedicationCycle.
     * @example
     * // Create one MedicationCycle
     * const MedicationCycle = await prisma.medicationCycle.create({
     *   data: {
     *     // ... data to create a MedicationCycle
     *   }
     * })
     * 
     */
    create<T extends MedicationCycleCreateArgs>(args: SelectSubset<T, MedicationCycleCreateArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MedicationCycles.
     * @param {MedicationCycleCreateManyArgs} args - Arguments to create many MedicationCycles.
     * @example
     * // Create many MedicationCycles
     * const medicationCycle = await prisma.medicationCycle.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicationCycleCreateManyArgs>(args?: SelectSubset<T, MedicationCycleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MedicationCycles and returns the data saved in the database.
     * @param {MedicationCycleCreateManyAndReturnArgs} args - Arguments to create many MedicationCycles.
     * @example
     * // Create many MedicationCycles
     * const medicationCycle = await prisma.medicationCycle.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MedicationCycles and only return the `id`
     * const medicationCycleWithIdOnly = await prisma.medicationCycle.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicationCycleCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationCycleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MedicationCycle.
     * @param {MedicationCycleDeleteArgs} args - Arguments to delete one MedicationCycle.
     * @example
     * // Delete one MedicationCycle
     * const MedicationCycle = await prisma.medicationCycle.delete({
     *   where: {
     *     // ... filter to delete one MedicationCycle
     *   }
     * })
     * 
     */
    delete<T extends MedicationCycleDeleteArgs>(args: SelectSubset<T, MedicationCycleDeleteArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MedicationCycle.
     * @param {MedicationCycleUpdateArgs} args - Arguments to update one MedicationCycle.
     * @example
     * // Update one MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicationCycleUpdateArgs>(args: SelectSubset<T, MedicationCycleUpdateArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MedicationCycles.
     * @param {MedicationCycleDeleteManyArgs} args - Arguments to filter MedicationCycles to delete.
     * @example
     * // Delete a few MedicationCycles
     * const { count } = await prisma.medicationCycle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicationCycleDeleteManyArgs>(args?: SelectSubset<T, MedicationCycleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MedicationCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MedicationCycles
     * const medicationCycle = await prisma.medicationCycle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicationCycleUpdateManyArgs>(args: SelectSubset<T, MedicationCycleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MedicationCycle.
     * @param {MedicationCycleUpsertArgs} args - Arguments to update or create a MedicationCycle.
     * @example
     * // Update or create a MedicationCycle
     * const medicationCycle = await prisma.medicationCycle.upsert({
     *   create: {
     *     // ... data to create a MedicationCycle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MedicationCycle we want to update
     *   }
     * })
     */
    upsert<T extends MedicationCycleUpsertArgs>(args: SelectSubset<T, MedicationCycleUpsertArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MedicationCycles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleCountArgs} args - Arguments to filter MedicationCycles to count.
     * @example
     * // Count the number of MedicationCycles
     * const count = await prisma.medicationCycle.count({
     *   where: {
     *     // ... the filter for the MedicationCycles we want to count
     *   }
     * })
    **/
    count<T extends MedicationCycleCountArgs>(
      args?: Subset<T, MedicationCycleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationCycleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MedicationCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationCycleAggregateArgs>(args: Subset<T, MedicationCycleAggregateArgs>): Prisma.PrismaPromise<GetMedicationCycleAggregateType<T>>

    /**
     * Group by MedicationCycle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCycleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicationCycleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationCycleGroupByArgs['orderBy'] }
        : { orderBy?: MedicationCycleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicationCycleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationCycleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MedicationCycle model
   */
  readonly fields: MedicationCycleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MedicationCycle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicationCycleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    metricLogs<T extends MedicationCycle$metricLogsArgs<ExtArgs> = {}>(args?: Subset<T, MedicationCycle$metricLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findMany"> | Null>
    doseLogs<T extends MedicationCycle$doseLogsArgs<ExtArgs> = {}>(args?: Subset<T, MedicationCycle$doseLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends MedicationCycle$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, MedicationCycle$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MedicationCycle model
   */ 
  interface MedicationCycleFieldRefs {
    readonly id: FieldRef<"MedicationCycle", 'Int'>
    readonly userId: FieldRef<"MedicationCycle", 'Int'>
    readonly name: FieldRef<"MedicationCycle", 'String'>
    readonly dosage: FieldRef<"MedicationCycle", 'String'>
    readonly startDate: FieldRef<"MedicationCycle", 'DateTime'>
    readonly endDate: FieldRef<"MedicationCycle", 'DateTime'>
    readonly frequencyDays: FieldRef<"MedicationCycle", 'Int'>
    readonly dosesPerDay: FieldRef<"MedicationCycle", 'Int'>
    readonly metricsToMonitor: FieldRef<"MedicationCycle", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MedicationCycle findUnique
   */
  export type MedicationCycleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter, which MedicationCycle to fetch.
     */
    where: MedicationCycleWhereUniqueInput
  }

  /**
   * MedicationCycle findUniqueOrThrow
   */
  export type MedicationCycleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter, which MedicationCycle to fetch.
     */
    where: MedicationCycleWhereUniqueInput
  }

  /**
   * MedicationCycle findFirst
   */
  export type MedicationCycleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter, which MedicationCycle to fetch.
     */
    where?: MedicationCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationCycles to fetch.
     */
    orderBy?: MedicationCycleOrderByWithRelationInput | MedicationCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicationCycles.
     */
    cursor?: MedicationCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicationCycles.
     */
    distinct?: MedicationCycleScalarFieldEnum | MedicationCycleScalarFieldEnum[]
  }

  /**
   * MedicationCycle findFirstOrThrow
   */
  export type MedicationCycleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter, which MedicationCycle to fetch.
     */
    where?: MedicationCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationCycles to fetch.
     */
    orderBy?: MedicationCycleOrderByWithRelationInput | MedicationCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MedicationCycles.
     */
    cursor?: MedicationCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationCycles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MedicationCycles.
     */
    distinct?: MedicationCycleScalarFieldEnum | MedicationCycleScalarFieldEnum[]
  }

  /**
   * MedicationCycle findMany
   */
  export type MedicationCycleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter, which MedicationCycles to fetch.
     */
    where?: MedicationCycleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MedicationCycles to fetch.
     */
    orderBy?: MedicationCycleOrderByWithRelationInput | MedicationCycleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MedicationCycles.
     */
    cursor?: MedicationCycleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MedicationCycles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MedicationCycles.
     */
    skip?: number
    distinct?: MedicationCycleScalarFieldEnum | MedicationCycleScalarFieldEnum[]
  }

  /**
   * MedicationCycle create
   */
  export type MedicationCycleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * The data needed to create a MedicationCycle.
     */
    data: XOR<MedicationCycleCreateInput, MedicationCycleUncheckedCreateInput>
  }

  /**
   * MedicationCycle createMany
   */
  export type MedicationCycleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MedicationCycles.
     */
    data: MedicationCycleCreateManyInput | MedicationCycleCreateManyInput[]
  }

  /**
   * MedicationCycle createManyAndReturn
   */
  export type MedicationCycleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MedicationCycles.
     */
    data: MedicationCycleCreateManyInput | MedicationCycleCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MedicationCycle update
   */
  export type MedicationCycleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * The data needed to update a MedicationCycle.
     */
    data: XOR<MedicationCycleUpdateInput, MedicationCycleUncheckedUpdateInput>
    /**
     * Choose, which MedicationCycle to update.
     */
    where: MedicationCycleWhereUniqueInput
  }

  /**
   * MedicationCycle updateMany
   */
  export type MedicationCycleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MedicationCycles.
     */
    data: XOR<MedicationCycleUpdateManyMutationInput, MedicationCycleUncheckedUpdateManyInput>
    /**
     * Filter which MedicationCycles to update
     */
    where?: MedicationCycleWhereInput
  }

  /**
   * MedicationCycle upsert
   */
  export type MedicationCycleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * The filter to search for the MedicationCycle to update in case it exists.
     */
    where: MedicationCycleWhereUniqueInput
    /**
     * In case the MedicationCycle found by the `where` argument doesn't exist, create a new MedicationCycle with this data.
     */
    create: XOR<MedicationCycleCreateInput, MedicationCycleUncheckedCreateInput>
    /**
     * In case the MedicationCycle was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicationCycleUpdateInput, MedicationCycleUncheckedUpdateInput>
  }

  /**
   * MedicationCycle delete
   */
  export type MedicationCycleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    /**
     * Filter which MedicationCycle to delete.
     */
    where: MedicationCycleWhereUniqueInput
  }

  /**
   * MedicationCycle deleteMany
   */
  export type MedicationCycleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MedicationCycles to delete
     */
    where?: MedicationCycleWhereInput
  }

  /**
   * MedicationCycle.metricLogs
   */
  export type MedicationCycle$metricLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    where?: MetricLogWhereInput
    orderBy?: MetricLogOrderByWithRelationInput | MetricLogOrderByWithRelationInput[]
    cursor?: MetricLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MetricLogScalarFieldEnum | MetricLogScalarFieldEnum[]
  }

  /**
   * MedicationCycle.doseLogs
   */
  export type MedicationCycle$doseLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    where?: DoseLogWhereInput
    orderBy?: DoseLogOrderByWithRelationInput | DoseLogOrderByWithRelationInput[]
    cursor?: DoseLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DoseLogScalarFieldEnum | DoseLogScalarFieldEnum[]
  }

  /**
   * MedicationCycle.notifications
   */
  export type MedicationCycle$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * MedicationCycle without action
   */
  export type MedicationCycleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
  }


  /**
   * Model MetricLog
   */

  export type AggregateMetricLog = {
    _count: MetricLogCountAggregateOutputType | null
    _avg: MetricLogAvgAggregateOutputType | null
    _sum: MetricLogSumAggregateOutputType | null
    _min: MetricLogMinAggregateOutputType | null
    _max: MetricLogMaxAggregateOutputType | null
  }

  export type MetricLogAvgAggregateOutputType = {
    id: number | null
    cycleId: number | null
    valueFloat: number | null
  }

  export type MetricLogSumAggregateOutputType = {
    id: number | null
    cycleId: number | null
    valueFloat: number | null
  }

  export type MetricLogMinAggregateOutputType = {
    id: number | null
    cycleId: number | null
    date: Date | null
    kind: string | null
    valueFloat: number | null
    valueText: string | null
    notes: string | null
  }

  export type MetricLogMaxAggregateOutputType = {
    id: number | null
    cycleId: number | null
    date: Date | null
    kind: string | null
    valueFloat: number | null
    valueText: string | null
    notes: string | null
  }

  export type MetricLogCountAggregateOutputType = {
    id: number
    cycleId: number
    date: number
    kind: number
    valueFloat: number
    valueText: number
    notes: number
    _all: number
  }


  export type MetricLogAvgAggregateInputType = {
    id?: true
    cycleId?: true
    valueFloat?: true
  }

  export type MetricLogSumAggregateInputType = {
    id?: true
    cycleId?: true
    valueFloat?: true
  }

  export type MetricLogMinAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    kind?: true
    valueFloat?: true
    valueText?: true
    notes?: true
  }

  export type MetricLogMaxAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    kind?: true
    valueFloat?: true
    valueText?: true
    notes?: true
  }

  export type MetricLogCountAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    kind?: true
    valueFloat?: true
    valueText?: true
    notes?: true
    _all?: true
  }

  export type MetricLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricLog to aggregate.
     */
    where?: MetricLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricLogs to fetch.
     */
    orderBy?: MetricLogOrderByWithRelationInput | MetricLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MetricLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MetricLogs
    **/
    _count?: true | MetricLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MetricLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MetricLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MetricLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MetricLogMaxAggregateInputType
  }

  export type GetMetricLogAggregateType<T extends MetricLogAggregateArgs> = {
        [P in keyof T & keyof AggregateMetricLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMetricLog[P]>
      : GetScalarType<T[P], AggregateMetricLog[P]>
  }




  export type MetricLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MetricLogWhereInput
    orderBy?: MetricLogOrderByWithAggregationInput | MetricLogOrderByWithAggregationInput[]
    by: MetricLogScalarFieldEnum[] | MetricLogScalarFieldEnum
    having?: MetricLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MetricLogCountAggregateInputType | true
    _avg?: MetricLogAvgAggregateInputType
    _sum?: MetricLogSumAggregateInputType
    _min?: MetricLogMinAggregateInputType
    _max?: MetricLogMaxAggregateInputType
  }

  export type MetricLogGroupByOutputType = {
    id: number
    cycleId: number
    date: Date
    kind: string
    valueFloat: number | null
    valueText: string | null
    notes: string | null
    _count: MetricLogCountAggregateOutputType | null
    _avg: MetricLogAvgAggregateOutputType | null
    _sum: MetricLogSumAggregateOutputType | null
    _min: MetricLogMinAggregateOutputType | null
    _max: MetricLogMaxAggregateOutputType | null
  }

  type GetMetricLogGroupByPayload<T extends MetricLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MetricLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MetricLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MetricLogGroupByOutputType[P]>
            : GetScalarType<T[P], MetricLogGroupByOutputType[P]>
        }
      >
    >


  export type MetricLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cycleId?: boolean
    date?: boolean
    kind?: boolean
    valueFloat?: boolean
    valueText?: boolean
    notes?: boolean
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricLog"]>

  export type MetricLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cycleId?: boolean
    date?: boolean
    kind?: boolean
    valueFloat?: boolean
    valueText?: boolean
    notes?: boolean
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["metricLog"]>

  export type MetricLogSelectScalar = {
    id?: boolean
    cycleId?: boolean
    date?: boolean
    kind?: boolean
    valueFloat?: boolean
    valueText?: boolean
    notes?: boolean
  }

  export type MetricLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }
  export type MetricLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }

  export type $MetricLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MetricLog"
    objects: {
      cycle: Prisma.$MedicationCyclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cycleId: number
      date: Date
      kind: string
      valueFloat: number | null
      valueText: string | null
      notes: string | null
    }, ExtArgs["result"]["metricLog"]>
    composites: {}
  }

  type MetricLogGetPayload<S extends boolean | null | undefined | MetricLogDefaultArgs> = $Result.GetResult<Prisma.$MetricLogPayload, S>

  type MetricLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MetricLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MetricLogCountAggregateInputType | true
    }

  export interface MetricLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MetricLog'], meta: { name: 'MetricLog' } }
    /**
     * Find zero or one MetricLog that matches the filter.
     * @param {MetricLogFindUniqueArgs} args - Arguments to find a MetricLog
     * @example
     * // Get one MetricLog
     * const metricLog = await prisma.metricLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MetricLogFindUniqueArgs>(args: SelectSubset<T, MetricLogFindUniqueArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MetricLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MetricLogFindUniqueOrThrowArgs} args - Arguments to find a MetricLog
     * @example
     * // Get one MetricLog
     * const metricLog = await prisma.metricLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MetricLogFindUniqueOrThrowArgs>(args: SelectSubset<T, MetricLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MetricLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogFindFirstArgs} args - Arguments to find a MetricLog
     * @example
     * // Get one MetricLog
     * const metricLog = await prisma.metricLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MetricLogFindFirstArgs>(args?: SelectSubset<T, MetricLogFindFirstArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MetricLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogFindFirstOrThrowArgs} args - Arguments to find a MetricLog
     * @example
     * // Get one MetricLog
     * const metricLog = await prisma.metricLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MetricLogFindFirstOrThrowArgs>(args?: SelectSubset<T, MetricLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MetricLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MetricLogs
     * const metricLogs = await prisma.metricLog.findMany()
     * 
     * // Get first 10 MetricLogs
     * const metricLogs = await prisma.metricLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const metricLogWithIdOnly = await prisma.metricLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MetricLogFindManyArgs>(args?: SelectSubset<T, MetricLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MetricLog.
     * @param {MetricLogCreateArgs} args - Arguments to create a MetricLog.
     * @example
     * // Create one MetricLog
     * const MetricLog = await prisma.metricLog.create({
     *   data: {
     *     // ... data to create a MetricLog
     *   }
     * })
     * 
     */
    create<T extends MetricLogCreateArgs>(args: SelectSubset<T, MetricLogCreateArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MetricLogs.
     * @param {MetricLogCreateManyArgs} args - Arguments to create many MetricLogs.
     * @example
     * // Create many MetricLogs
     * const metricLog = await prisma.metricLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MetricLogCreateManyArgs>(args?: SelectSubset<T, MetricLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MetricLogs and returns the data saved in the database.
     * @param {MetricLogCreateManyAndReturnArgs} args - Arguments to create many MetricLogs.
     * @example
     * // Create many MetricLogs
     * const metricLog = await prisma.metricLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MetricLogs and only return the `id`
     * const metricLogWithIdOnly = await prisma.metricLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MetricLogCreateManyAndReturnArgs>(args?: SelectSubset<T, MetricLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MetricLog.
     * @param {MetricLogDeleteArgs} args - Arguments to delete one MetricLog.
     * @example
     * // Delete one MetricLog
     * const MetricLog = await prisma.metricLog.delete({
     *   where: {
     *     // ... filter to delete one MetricLog
     *   }
     * })
     * 
     */
    delete<T extends MetricLogDeleteArgs>(args: SelectSubset<T, MetricLogDeleteArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MetricLog.
     * @param {MetricLogUpdateArgs} args - Arguments to update one MetricLog.
     * @example
     * // Update one MetricLog
     * const metricLog = await prisma.metricLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MetricLogUpdateArgs>(args: SelectSubset<T, MetricLogUpdateArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MetricLogs.
     * @param {MetricLogDeleteManyArgs} args - Arguments to filter MetricLogs to delete.
     * @example
     * // Delete a few MetricLogs
     * const { count } = await prisma.metricLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MetricLogDeleteManyArgs>(args?: SelectSubset<T, MetricLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MetricLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MetricLogs
     * const metricLog = await prisma.metricLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MetricLogUpdateManyArgs>(args: SelectSubset<T, MetricLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MetricLog.
     * @param {MetricLogUpsertArgs} args - Arguments to update or create a MetricLog.
     * @example
     * // Update or create a MetricLog
     * const metricLog = await prisma.metricLog.upsert({
     *   create: {
     *     // ... data to create a MetricLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MetricLog we want to update
     *   }
     * })
     */
    upsert<T extends MetricLogUpsertArgs>(args: SelectSubset<T, MetricLogUpsertArgs<ExtArgs>>): Prisma__MetricLogClient<$Result.GetResult<Prisma.$MetricLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MetricLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogCountArgs} args - Arguments to filter MetricLogs to count.
     * @example
     * // Count the number of MetricLogs
     * const count = await prisma.metricLog.count({
     *   where: {
     *     // ... the filter for the MetricLogs we want to count
     *   }
     * })
    **/
    count<T extends MetricLogCountArgs>(
      args?: Subset<T, MetricLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MetricLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MetricLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MetricLogAggregateArgs>(args: Subset<T, MetricLogAggregateArgs>): Prisma.PrismaPromise<GetMetricLogAggregateType<T>>

    /**
     * Group by MetricLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MetricLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MetricLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MetricLogGroupByArgs['orderBy'] }
        : { orderBy?: MetricLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MetricLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMetricLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MetricLog model
   */
  readonly fields: MetricLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MetricLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MetricLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cycle<T extends MedicationCycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationCycleDefaultArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MetricLog model
   */ 
  interface MetricLogFieldRefs {
    readonly id: FieldRef<"MetricLog", 'Int'>
    readonly cycleId: FieldRef<"MetricLog", 'Int'>
    readonly date: FieldRef<"MetricLog", 'DateTime'>
    readonly kind: FieldRef<"MetricLog", 'String'>
    readonly valueFloat: FieldRef<"MetricLog", 'Float'>
    readonly valueText: FieldRef<"MetricLog", 'String'>
    readonly notes: FieldRef<"MetricLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MetricLog findUnique
   */
  export type MetricLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter, which MetricLog to fetch.
     */
    where: MetricLogWhereUniqueInput
  }

  /**
   * MetricLog findUniqueOrThrow
   */
  export type MetricLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter, which MetricLog to fetch.
     */
    where: MetricLogWhereUniqueInput
  }

  /**
   * MetricLog findFirst
   */
  export type MetricLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter, which MetricLog to fetch.
     */
    where?: MetricLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricLogs to fetch.
     */
    orderBy?: MetricLogOrderByWithRelationInput | MetricLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricLogs.
     */
    cursor?: MetricLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricLogs.
     */
    distinct?: MetricLogScalarFieldEnum | MetricLogScalarFieldEnum[]
  }

  /**
   * MetricLog findFirstOrThrow
   */
  export type MetricLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter, which MetricLog to fetch.
     */
    where?: MetricLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricLogs to fetch.
     */
    orderBy?: MetricLogOrderByWithRelationInput | MetricLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MetricLogs.
     */
    cursor?: MetricLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MetricLogs.
     */
    distinct?: MetricLogScalarFieldEnum | MetricLogScalarFieldEnum[]
  }

  /**
   * MetricLog findMany
   */
  export type MetricLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter, which MetricLogs to fetch.
     */
    where?: MetricLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MetricLogs to fetch.
     */
    orderBy?: MetricLogOrderByWithRelationInput | MetricLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MetricLogs.
     */
    cursor?: MetricLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MetricLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MetricLogs.
     */
    skip?: number
    distinct?: MetricLogScalarFieldEnum | MetricLogScalarFieldEnum[]
  }

  /**
   * MetricLog create
   */
  export type MetricLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * The data needed to create a MetricLog.
     */
    data: XOR<MetricLogCreateInput, MetricLogUncheckedCreateInput>
  }

  /**
   * MetricLog createMany
   */
  export type MetricLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MetricLogs.
     */
    data: MetricLogCreateManyInput | MetricLogCreateManyInput[]
  }

  /**
   * MetricLog createManyAndReturn
   */
  export type MetricLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MetricLogs.
     */
    data: MetricLogCreateManyInput | MetricLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MetricLog update
   */
  export type MetricLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * The data needed to update a MetricLog.
     */
    data: XOR<MetricLogUpdateInput, MetricLogUncheckedUpdateInput>
    /**
     * Choose, which MetricLog to update.
     */
    where: MetricLogWhereUniqueInput
  }

  /**
   * MetricLog updateMany
   */
  export type MetricLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MetricLogs.
     */
    data: XOR<MetricLogUpdateManyMutationInput, MetricLogUncheckedUpdateManyInput>
    /**
     * Filter which MetricLogs to update
     */
    where?: MetricLogWhereInput
  }

  /**
   * MetricLog upsert
   */
  export type MetricLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * The filter to search for the MetricLog to update in case it exists.
     */
    where: MetricLogWhereUniqueInput
    /**
     * In case the MetricLog found by the `where` argument doesn't exist, create a new MetricLog with this data.
     */
    create: XOR<MetricLogCreateInput, MetricLogUncheckedCreateInput>
    /**
     * In case the MetricLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MetricLogUpdateInput, MetricLogUncheckedUpdateInput>
  }

  /**
   * MetricLog delete
   */
  export type MetricLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
    /**
     * Filter which MetricLog to delete.
     */
    where: MetricLogWhereUniqueInput
  }

  /**
   * MetricLog deleteMany
   */
  export type MetricLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MetricLogs to delete
     */
    where?: MetricLogWhereInput
  }

  /**
   * MetricLog without action
   */
  export type MetricLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MetricLog
     */
    select?: MetricLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MetricLogInclude<ExtArgs> | null
  }


  /**
   * Model DoseLog
   */

  export type AggregateDoseLog = {
    _count: DoseLogCountAggregateOutputType | null
    _avg: DoseLogAvgAggregateOutputType | null
    _sum: DoseLogSumAggregateOutputType | null
    _min: DoseLogMinAggregateOutputType | null
    _max: DoseLogMaxAggregateOutputType | null
  }

  export type DoseLogAvgAggregateOutputType = {
    id: number | null
    cycleId: number | null
  }

  export type DoseLogSumAggregateOutputType = {
    id: number | null
    cycleId: number | null
  }

  export type DoseLogMinAggregateOutputType = {
    id: number | null
    cycleId: number | null
    date: Date | null
    taken: boolean | null
  }

  export type DoseLogMaxAggregateOutputType = {
    id: number | null
    cycleId: number | null
    date: Date | null
    taken: boolean | null
  }

  export type DoseLogCountAggregateOutputType = {
    id: number
    cycleId: number
    date: number
    taken: number
    _all: number
  }


  export type DoseLogAvgAggregateInputType = {
    id?: true
    cycleId?: true
  }

  export type DoseLogSumAggregateInputType = {
    id?: true
    cycleId?: true
  }

  export type DoseLogMinAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    taken?: true
  }

  export type DoseLogMaxAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    taken?: true
  }

  export type DoseLogCountAggregateInputType = {
    id?: true
    cycleId?: true
    date?: true
    taken?: true
    _all?: true
  }

  export type DoseLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoseLog to aggregate.
     */
    where?: DoseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoseLogs to fetch.
     */
    orderBy?: DoseLogOrderByWithRelationInput | DoseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DoseLogs
    **/
    _count?: true | DoseLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoseLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoseLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoseLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoseLogMaxAggregateInputType
  }

  export type GetDoseLogAggregateType<T extends DoseLogAggregateArgs> = {
        [P in keyof T & keyof AggregateDoseLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoseLog[P]>
      : GetScalarType<T[P], AggregateDoseLog[P]>
  }




  export type DoseLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoseLogWhereInput
    orderBy?: DoseLogOrderByWithAggregationInput | DoseLogOrderByWithAggregationInput[]
    by: DoseLogScalarFieldEnum[] | DoseLogScalarFieldEnum
    having?: DoseLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoseLogCountAggregateInputType | true
    _avg?: DoseLogAvgAggregateInputType
    _sum?: DoseLogSumAggregateInputType
    _min?: DoseLogMinAggregateInputType
    _max?: DoseLogMaxAggregateInputType
  }

  export type DoseLogGroupByOutputType = {
    id: number
    cycleId: number
    date: Date
    taken: boolean
    _count: DoseLogCountAggregateOutputType | null
    _avg: DoseLogAvgAggregateOutputType | null
    _sum: DoseLogSumAggregateOutputType | null
    _min: DoseLogMinAggregateOutputType | null
    _max: DoseLogMaxAggregateOutputType | null
  }

  type GetDoseLogGroupByPayload<T extends DoseLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoseLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoseLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoseLogGroupByOutputType[P]>
            : GetScalarType<T[P], DoseLogGroupByOutputType[P]>
        }
      >
    >


  export type DoseLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cycleId?: boolean
    date?: boolean
    taken?: boolean
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doseLog"]>

  export type DoseLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    cycleId?: boolean
    date?: boolean
    taken?: boolean
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["doseLog"]>

  export type DoseLogSelectScalar = {
    id?: boolean
    cycleId?: boolean
    date?: boolean
    taken?: boolean
  }

  export type DoseLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }
  export type DoseLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cycle?: boolean | MedicationCycleDefaultArgs<ExtArgs>
  }

  export type $DoseLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DoseLog"
    objects: {
      cycle: Prisma.$MedicationCyclePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      cycleId: number
      date: Date
      taken: boolean
    }, ExtArgs["result"]["doseLog"]>
    composites: {}
  }

  type DoseLogGetPayload<S extends boolean | null | undefined | DoseLogDefaultArgs> = $Result.GetResult<Prisma.$DoseLogPayload, S>

  type DoseLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoseLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DoseLogCountAggregateInputType | true
    }

  export interface DoseLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DoseLog'], meta: { name: 'DoseLog' } }
    /**
     * Find zero or one DoseLog that matches the filter.
     * @param {DoseLogFindUniqueArgs} args - Arguments to find a DoseLog
     * @example
     * // Get one DoseLog
     * const doseLog = await prisma.doseLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DoseLogFindUniqueArgs>(args: SelectSubset<T, DoseLogFindUniqueArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DoseLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DoseLogFindUniqueOrThrowArgs} args - Arguments to find a DoseLog
     * @example
     * // Get one DoseLog
     * const doseLog = await prisma.doseLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DoseLogFindUniqueOrThrowArgs>(args: SelectSubset<T, DoseLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DoseLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogFindFirstArgs} args - Arguments to find a DoseLog
     * @example
     * // Get one DoseLog
     * const doseLog = await prisma.doseLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DoseLogFindFirstArgs>(args?: SelectSubset<T, DoseLogFindFirstArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DoseLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogFindFirstOrThrowArgs} args - Arguments to find a DoseLog
     * @example
     * // Get one DoseLog
     * const doseLog = await prisma.doseLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DoseLogFindFirstOrThrowArgs>(args?: SelectSubset<T, DoseLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DoseLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DoseLogs
     * const doseLogs = await prisma.doseLog.findMany()
     * 
     * // Get first 10 DoseLogs
     * const doseLogs = await prisma.doseLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doseLogWithIdOnly = await prisma.doseLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DoseLogFindManyArgs>(args?: SelectSubset<T, DoseLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DoseLog.
     * @param {DoseLogCreateArgs} args - Arguments to create a DoseLog.
     * @example
     * // Create one DoseLog
     * const DoseLog = await prisma.doseLog.create({
     *   data: {
     *     // ... data to create a DoseLog
     *   }
     * })
     * 
     */
    create<T extends DoseLogCreateArgs>(args: SelectSubset<T, DoseLogCreateArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DoseLogs.
     * @param {DoseLogCreateManyArgs} args - Arguments to create many DoseLogs.
     * @example
     * // Create many DoseLogs
     * const doseLog = await prisma.doseLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DoseLogCreateManyArgs>(args?: SelectSubset<T, DoseLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DoseLogs and returns the data saved in the database.
     * @param {DoseLogCreateManyAndReturnArgs} args - Arguments to create many DoseLogs.
     * @example
     * // Create many DoseLogs
     * const doseLog = await prisma.doseLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DoseLogs and only return the `id`
     * const doseLogWithIdOnly = await prisma.doseLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DoseLogCreateManyAndReturnArgs>(args?: SelectSubset<T, DoseLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DoseLog.
     * @param {DoseLogDeleteArgs} args - Arguments to delete one DoseLog.
     * @example
     * // Delete one DoseLog
     * const DoseLog = await prisma.doseLog.delete({
     *   where: {
     *     // ... filter to delete one DoseLog
     *   }
     * })
     * 
     */
    delete<T extends DoseLogDeleteArgs>(args: SelectSubset<T, DoseLogDeleteArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DoseLog.
     * @param {DoseLogUpdateArgs} args - Arguments to update one DoseLog.
     * @example
     * // Update one DoseLog
     * const doseLog = await prisma.doseLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DoseLogUpdateArgs>(args: SelectSubset<T, DoseLogUpdateArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DoseLogs.
     * @param {DoseLogDeleteManyArgs} args - Arguments to filter DoseLogs to delete.
     * @example
     * // Delete a few DoseLogs
     * const { count } = await prisma.doseLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DoseLogDeleteManyArgs>(args?: SelectSubset<T, DoseLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DoseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DoseLogs
     * const doseLog = await prisma.doseLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DoseLogUpdateManyArgs>(args: SelectSubset<T, DoseLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DoseLog.
     * @param {DoseLogUpsertArgs} args - Arguments to update or create a DoseLog.
     * @example
     * // Update or create a DoseLog
     * const doseLog = await prisma.doseLog.upsert({
     *   create: {
     *     // ... data to create a DoseLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DoseLog we want to update
     *   }
     * })
     */
    upsert<T extends DoseLogUpsertArgs>(args: SelectSubset<T, DoseLogUpsertArgs<ExtArgs>>): Prisma__DoseLogClient<$Result.GetResult<Prisma.$DoseLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DoseLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogCountArgs} args - Arguments to filter DoseLogs to count.
     * @example
     * // Count the number of DoseLogs
     * const count = await prisma.doseLog.count({
     *   where: {
     *     // ... the filter for the DoseLogs we want to count
     *   }
     * })
    **/
    count<T extends DoseLogCountArgs>(
      args?: Subset<T, DoseLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoseLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DoseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoseLogAggregateArgs>(args: Subset<T, DoseLogAggregateArgs>): Prisma.PrismaPromise<GetDoseLogAggregateType<T>>

    /**
     * Group by DoseLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoseLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoseLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoseLogGroupByArgs['orderBy'] }
        : { orderBy?: DoseLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoseLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoseLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DoseLog model
   */
  readonly fields: DoseLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DoseLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoseLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cycle<T extends MedicationCycleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationCycleDefaultArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DoseLog model
   */ 
  interface DoseLogFieldRefs {
    readonly id: FieldRef<"DoseLog", 'Int'>
    readonly cycleId: FieldRef<"DoseLog", 'Int'>
    readonly date: FieldRef<"DoseLog", 'DateTime'>
    readonly taken: FieldRef<"DoseLog", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * DoseLog findUnique
   */
  export type DoseLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter, which DoseLog to fetch.
     */
    where: DoseLogWhereUniqueInput
  }

  /**
   * DoseLog findUniqueOrThrow
   */
  export type DoseLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter, which DoseLog to fetch.
     */
    where: DoseLogWhereUniqueInput
  }

  /**
   * DoseLog findFirst
   */
  export type DoseLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter, which DoseLog to fetch.
     */
    where?: DoseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoseLogs to fetch.
     */
    orderBy?: DoseLogOrderByWithRelationInput | DoseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoseLogs.
     */
    cursor?: DoseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoseLogs.
     */
    distinct?: DoseLogScalarFieldEnum | DoseLogScalarFieldEnum[]
  }

  /**
   * DoseLog findFirstOrThrow
   */
  export type DoseLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter, which DoseLog to fetch.
     */
    where?: DoseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoseLogs to fetch.
     */
    orderBy?: DoseLogOrderByWithRelationInput | DoseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DoseLogs.
     */
    cursor?: DoseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoseLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DoseLogs.
     */
    distinct?: DoseLogScalarFieldEnum | DoseLogScalarFieldEnum[]
  }

  /**
   * DoseLog findMany
   */
  export type DoseLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter, which DoseLogs to fetch.
     */
    where?: DoseLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DoseLogs to fetch.
     */
    orderBy?: DoseLogOrderByWithRelationInput | DoseLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DoseLogs.
     */
    cursor?: DoseLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DoseLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DoseLogs.
     */
    skip?: number
    distinct?: DoseLogScalarFieldEnum | DoseLogScalarFieldEnum[]
  }

  /**
   * DoseLog create
   */
  export type DoseLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * The data needed to create a DoseLog.
     */
    data: XOR<DoseLogCreateInput, DoseLogUncheckedCreateInput>
  }

  /**
   * DoseLog createMany
   */
  export type DoseLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DoseLogs.
     */
    data: DoseLogCreateManyInput | DoseLogCreateManyInput[]
  }

  /**
   * DoseLog createManyAndReturn
   */
  export type DoseLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DoseLogs.
     */
    data: DoseLogCreateManyInput | DoseLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DoseLog update
   */
  export type DoseLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * The data needed to update a DoseLog.
     */
    data: XOR<DoseLogUpdateInput, DoseLogUncheckedUpdateInput>
    /**
     * Choose, which DoseLog to update.
     */
    where: DoseLogWhereUniqueInput
  }

  /**
   * DoseLog updateMany
   */
  export type DoseLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DoseLogs.
     */
    data: XOR<DoseLogUpdateManyMutationInput, DoseLogUncheckedUpdateManyInput>
    /**
     * Filter which DoseLogs to update
     */
    where?: DoseLogWhereInput
  }

  /**
   * DoseLog upsert
   */
  export type DoseLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * The filter to search for the DoseLog to update in case it exists.
     */
    where: DoseLogWhereUniqueInput
    /**
     * In case the DoseLog found by the `where` argument doesn't exist, create a new DoseLog with this data.
     */
    create: XOR<DoseLogCreateInput, DoseLogUncheckedCreateInput>
    /**
     * In case the DoseLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoseLogUpdateInput, DoseLogUncheckedUpdateInput>
  }

  /**
   * DoseLog delete
   */
  export type DoseLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
    /**
     * Filter which DoseLog to delete.
     */
    where: DoseLogWhereUniqueInput
  }

  /**
   * DoseLog deleteMany
   */
  export type DoseLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DoseLogs to delete
     */
    where?: DoseLogWhereInput
  }

  /**
   * DoseLog without action
   */
  export type DoseLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DoseLog
     */
    select?: DoseLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DoseLogInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    cycleId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    cycleId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    cycleId: number | null
    date: Date | null
    message: string | null
    sent: boolean | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    cycleId: number | null
    date: Date | null
    message: string | null
    sent: boolean | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    cycleId: number
    date: number
    message: number
    sent: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
    cycleId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
    cycleId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    cycleId?: true
    date?: true
    message?: true
    sent?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    cycleId?: true
    date?: true
    message?: true
    sent?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    cycleId?: true
    date?: true
    message?: true
    sent?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    cycleId: number | null
    date: Date
    message: string
    sent: boolean
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cycleId?: boolean
    date?: boolean
    message?: boolean
    sent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cycle?: boolean | Notification$cycleArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    cycleId?: boolean
    date?: boolean
    message?: boolean
    sent?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cycle?: boolean | Notification$cycleArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    cycleId?: boolean
    date?: boolean
    message?: boolean
    sent?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cycle?: boolean | Notification$cycleArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cycle?: boolean | Notification$cycleArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cycle: Prisma.$MedicationCyclePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      cycleId: number | null
      date: Date
      message: string
      sent: boolean
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    cycle<T extends Notification$cycleArgs<ExtArgs> = {}>(args?: Subset<T, Notification$cycleArgs<ExtArgs>>): Prisma__MedicationCycleClient<$Result.GetResult<Prisma.$MedicationCyclePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly cycleId: FieldRef<"Notification", 'Int'>
    readonly date: FieldRef<"Notification", 'DateTime'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly sent: FieldRef<"Notification", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.cycle
   */
  export type Notification$cycleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCycle
     */
    select?: MedicationCycleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationCycleInclude<ExtArgs> | null
    where?: MedicationCycleWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    resetToken: 'resetToken',
    resetTokenExpiry: 'resetTokenExpiry',
    is2FAEnabled: 'is2FAEnabled',
    twoFASecret: 'twoFASecret'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MedicationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    startDate: 'startDate',
    endDate: 'endDate',
    dosage: 'dosage',
    frequency: 'frequency'
  };

  export type MedicationScalarFieldEnum = (typeof MedicationScalarFieldEnum)[keyof typeof MedicationScalarFieldEnum]


  export const MedicationLogScalarFieldEnum: {
    id: 'id',
    medicationId: 'medicationId',
    date: 'date',
    dosage: 'dosage'
  };

  export type MedicationLogScalarFieldEnum = (typeof MedicationLogScalarFieldEnum)[keyof typeof MedicationLogScalarFieldEnum]


  export const MetricScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    date: 'date',
    weight: 'weight',
    height: 'height',
    bmi: 'bmi',
    bloodPressure: 'bloodPressure',
    hipCircumference: 'hipCircumference'
  };

  export type MetricScalarFieldEnum = (typeof MetricScalarFieldEnum)[keyof typeof MetricScalarFieldEnum]


  export const MedicationCycleScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    name: 'name',
    dosage: 'dosage',
    startDate: 'startDate',
    endDate: 'endDate',
    frequencyDays: 'frequencyDays',
    dosesPerDay: 'dosesPerDay',
    metricsToMonitor: 'metricsToMonitor'
  };

  export type MedicationCycleScalarFieldEnum = (typeof MedicationCycleScalarFieldEnum)[keyof typeof MedicationCycleScalarFieldEnum]


  export const MetricLogScalarFieldEnum: {
    id: 'id',
    cycleId: 'cycleId',
    date: 'date',
    kind: 'kind',
    valueFloat: 'valueFloat',
    valueText: 'valueText',
    notes: 'notes'
  };

  export type MetricLogScalarFieldEnum = (typeof MetricLogScalarFieldEnum)[keyof typeof MetricLogScalarFieldEnum]


  export const DoseLogScalarFieldEnum: {
    id: 'id',
    cycleId: 'cycleId',
    date: 'date',
    taken: 'taken'
  };

  export type DoseLogScalarFieldEnum = (typeof DoseLogScalarFieldEnum)[keyof typeof DoseLogScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    cycleId: 'cycleId',
    date: 'date',
    message: 'message',
    sent: 'sent'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    is2FAEnabled?: BoolFilter<"User"> | boolean
    twoFASecret?: StringNullableFilter<"User"> | string | null
    medications?: MedicationListRelationFilter
    metrics?: MetricListRelationFilter
    cycles?: MedicationCycleListRelationFilter
    notifications?: NotificationListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    is2FAEnabled?: SortOrder
    twoFASecret?: SortOrderInput | SortOrder
    medications?: MedicationOrderByRelationAggregateInput
    metrics?: MetricOrderByRelationAggregateInput
    cycles?: MedicationCycleOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    resetToken?: StringNullableFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableFilter<"User"> | Date | string | null
    is2FAEnabled?: BoolFilter<"User"> | boolean
    twoFASecret?: StringNullableFilter<"User"> | string | null
    medications?: MedicationListRelationFilter
    metrics?: MetricListRelationFilter
    cycles?: MedicationCycleListRelationFilter
    notifications?: NotificationListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrderInput | SortOrder
    resetToken?: SortOrderInput | SortOrder
    resetTokenExpiry?: SortOrderInput | SortOrder
    is2FAEnabled?: SortOrder
    twoFASecret?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetToken?: StringNullableWithAggregatesFilter<"User"> | string | null
    resetTokenExpiry?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    is2FAEnabled?: BoolWithAggregatesFilter<"User"> | boolean
    twoFASecret?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type MedicationWhereInput = {
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    id?: IntFilter<"Medication"> | number
    userId?: IntFilter<"Medication"> | number
    name?: StringFilter<"Medication"> | string
    startDate?: DateTimeFilter<"Medication"> | Date | string
    endDate?: DateTimeFilter<"Medication"> | Date | string
    dosage?: StringFilter<"Medication"> | string
    frequency?: StringFilter<"Medication"> | string
    logs?: MedicationLogListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MedicationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dosage?: SortOrder
    frequency?: SortOrder
    logs?: MedicationLogOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type MedicationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    userId?: IntFilter<"Medication"> | number
    name?: StringFilter<"Medication"> | string
    startDate?: DateTimeFilter<"Medication"> | Date | string
    endDate?: DateTimeFilter<"Medication"> | Date | string
    dosage?: StringFilter<"Medication"> | string
    frequency?: StringFilter<"Medication"> | string
    logs?: MedicationLogListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MedicationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dosage?: SortOrder
    frequency?: SortOrder
    _count?: MedicationCountOrderByAggregateInput
    _avg?: MedicationAvgOrderByAggregateInput
    _max?: MedicationMaxOrderByAggregateInput
    _min?: MedicationMinOrderByAggregateInput
    _sum?: MedicationSumOrderByAggregateInput
  }

  export type MedicationScalarWhereWithAggregatesInput = {
    AND?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    OR?: MedicationScalarWhereWithAggregatesInput[]
    NOT?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Medication"> | number
    userId?: IntWithAggregatesFilter<"Medication"> | number
    name?: StringWithAggregatesFilter<"Medication"> | string
    startDate?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    dosage?: StringWithAggregatesFilter<"Medication"> | string
    frequency?: StringWithAggregatesFilter<"Medication"> | string
  }

  export type MedicationLogWhereInput = {
    AND?: MedicationLogWhereInput | MedicationLogWhereInput[]
    OR?: MedicationLogWhereInput[]
    NOT?: MedicationLogWhereInput | MedicationLogWhereInput[]
    id?: IntFilter<"MedicationLog"> | number
    medicationId?: IntFilter<"MedicationLog"> | number
    date?: DateTimeFilter<"MedicationLog"> | Date | string
    dosage?: StringFilter<"MedicationLog"> | string
    medication?: XOR<MedicationRelationFilter, MedicationWhereInput>
  }

  export type MedicationLogOrderByWithRelationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    date?: SortOrder
    dosage?: SortOrder
    medication?: MedicationOrderByWithRelationInput
  }

  export type MedicationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MedicationLogWhereInput | MedicationLogWhereInput[]
    OR?: MedicationLogWhereInput[]
    NOT?: MedicationLogWhereInput | MedicationLogWhereInput[]
    medicationId?: IntFilter<"MedicationLog"> | number
    date?: DateTimeFilter<"MedicationLog"> | Date | string
    dosage?: StringFilter<"MedicationLog"> | string
    medication?: XOR<MedicationRelationFilter, MedicationWhereInput>
  }, "id">

  export type MedicationLogOrderByWithAggregationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    date?: SortOrder
    dosage?: SortOrder
    _count?: MedicationLogCountOrderByAggregateInput
    _avg?: MedicationLogAvgOrderByAggregateInput
    _max?: MedicationLogMaxOrderByAggregateInput
    _min?: MedicationLogMinOrderByAggregateInput
    _sum?: MedicationLogSumOrderByAggregateInput
  }

  export type MedicationLogScalarWhereWithAggregatesInput = {
    AND?: MedicationLogScalarWhereWithAggregatesInput | MedicationLogScalarWhereWithAggregatesInput[]
    OR?: MedicationLogScalarWhereWithAggregatesInput[]
    NOT?: MedicationLogScalarWhereWithAggregatesInput | MedicationLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicationLog"> | number
    medicationId?: IntWithAggregatesFilter<"MedicationLog"> | number
    date?: DateTimeWithAggregatesFilter<"MedicationLog"> | Date | string
    dosage?: StringWithAggregatesFilter<"MedicationLog"> | string
  }

  export type MetricWhereInput = {
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    id?: IntFilter<"Metric"> | number
    userId?: IntFilter<"Metric"> | number
    date?: DateTimeFilter<"Metric"> | Date | string
    weight?: FloatFilter<"Metric"> | number
    height?: FloatFilter<"Metric"> | number
    bmi?: FloatFilter<"Metric"> | number
    bloodPressure?: StringFilter<"Metric"> | string
    hipCircumference?: FloatNullableFilter<"Metric"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MetricOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    bloodPressure?: SortOrder
    hipCircumference?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type MetricWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MetricWhereInput | MetricWhereInput[]
    OR?: MetricWhereInput[]
    NOT?: MetricWhereInput | MetricWhereInput[]
    userId?: IntFilter<"Metric"> | number
    date?: DateTimeFilter<"Metric"> | Date | string
    weight?: FloatFilter<"Metric"> | number
    height?: FloatFilter<"Metric"> | number
    bmi?: FloatFilter<"Metric"> | number
    bloodPressure?: StringFilter<"Metric"> | string
    hipCircumference?: FloatNullableFilter<"Metric"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MetricOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    bloodPressure?: SortOrder
    hipCircumference?: SortOrderInput | SortOrder
    _count?: MetricCountOrderByAggregateInput
    _avg?: MetricAvgOrderByAggregateInput
    _max?: MetricMaxOrderByAggregateInput
    _min?: MetricMinOrderByAggregateInput
    _sum?: MetricSumOrderByAggregateInput
  }

  export type MetricScalarWhereWithAggregatesInput = {
    AND?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    OR?: MetricScalarWhereWithAggregatesInput[]
    NOT?: MetricScalarWhereWithAggregatesInput | MetricScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Metric"> | number
    userId?: IntWithAggregatesFilter<"Metric"> | number
    date?: DateTimeWithAggregatesFilter<"Metric"> | Date | string
    weight?: FloatWithAggregatesFilter<"Metric"> | number
    height?: FloatWithAggregatesFilter<"Metric"> | number
    bmi?: FloatWithAggregatesFilter<"Metric"> | number
    bloodPressure?: StringWithAggregatesFilter<"Metric"> | string
    hipCircumference?: FloatNullableWithAggregatesFilter<"Metric"> | number | null
  }

  export type MedicationCycleWhereInput = {
    AND?: MedicationCycleWhereInput | MedicationCycleWhereInput[]
    OR?: MedicationCycleWhereInput[]
    NOT?: MedicationCycleWhereInput | MedicationCycleWhereInput[]
    id?: IntFilter<"MedicationCycle"> | number
    userId?: IntFilter<"MedicationCycle"> | number
    name?: StringFilter<"MedicationCycle"> | string
    dosage?: StringFilter<"MedicationCycle"> | string
    startDate?: DateTimeFilter<"MedicationCycle"> | Date | string
    endDate?: DateTimeNullableFilter<"MedicationCycle"> | Date | string | null
    frequencyDays?: IntFilter<"MedicationCycle"> | number
    dosesPerDay?: IntFilter<"MedicationCycle"> | number
    metricsToMonitor?: StringNullableFilter<"MedicationCycle"> | string | null
    metricLogs?: MetricLogListRelationFilter
    doseLogs?: DoseLogListRelationFilter
    notifications?: NotificationListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MedicationCycleOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
    metricsToMonitor?: SortOrderInput | SortOrder
    metricLogs?: MetricLogOrderByRelationAggregateInput
    doseLogs?: DoseLogOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type MedicationCycleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MedicationCycleWhereInput | MedicationCycleWhereInput[]
    OR?: MedicationCycleWhereInput[]
    NOT?: MedicationCycleWhereInput | MedicationCycleWhereInput[]
    userId?: IntFilter<"MedicationCycle"> | number
    name?: StringFilter<"MedicationCycle"> | string
    dosage?: StringFilter<"MedicationCycle"> | string
    startDate?: DateTimeFilter<"MedicationCycle"> | Date | string
    endDate?: DateTimeNullableFilter<"MedicationCycle"> | Date | string | null
    frequencyDays?: IntFilter<"MedicationCycle"> | number
    dosesPerDay?: IntFilter<"MedicationCycle"> | number
    metricsToMonitor?: StringNullableFilter<"MedicationCycle"> | string | null
    metricLogs?: MetricLogListRelationFilter
    doseLogs?: DoseLogListRelationFilter
    notifications?: NotificationListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type MedicationCycleOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
    metricsToMonitor?: SortOrderInput | SortOrder
    _count?: MedicationCycleCountOrderByAggregateInput
    _avg?: MedicationCycleAvgOrderByAggregateInput
    _max?: MedicationCycleMaxOrderByAggregateInput
    _min?: MedicationCycleMinOrderByAggregateInput
    _sum?: MedicationCycleSumOrderByAggregateInput
  }

  export type MedicationCycleScalarWhereWithAggregatesInput = {
    AND?: MedicationCycleScalarWhereWithAggregatesInput | MedicationCycleScalarWhereWithAggregatesInput[]
    OR?: MedicationCycleScalarWhereWithAggregatesInput[]
    NOT?: MedicationCycleScalarWhereWithAggregatesInput | MedicationCycleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MedicationCycle"> | number
    userId?: IntWithAggregatesFilter<"MedicationCycle"> | number
    name?: StringWithAggregatesFilter<"MedicationCycle"> | string
    dosage?: StringWithAggregatesFilter<"MedicationCycle"> | string
    startDate?: DateTimeWithAggregatesFilter<"MedicationCycle"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"MedicationCycle"> | Date | string | null
    frequencyDays?: IntWithAggregatesFilter<"MedicationCycle"> | number
    dosesPerDay?: IntWithAggregatesFilter<"MedicationCycle"> | number
    metricsToMonitor?: StringNullableWithAggregatesFilter<"MedicationCycle"> | string | null
  }

  export type MetricLogWhereInput = {
    AND?: MetricLogWhereInput | MetricLogWhereInput[]
    OR?: MetricLogWhereInput[]
    NOT?: MetricLogWhereInput | MetricLogWhereInput[]
    id?: IntFilter<"MetricLog"> | number
    cycleId?: IntFilter<"MetricLog"> | number
    date?: DateTimeFilter<"MetricLog"> | Date | string
    kind?: StringFilter<"MetricLog"> | string
    valueFloat?: FloatNullableFilter<"MetricLog"> | number | null
    valueText?: StringNullableFilter<"MetricLog"> | string | null
    notes?: StringNullableFilter<"MetricLog"> | string | null
    cycle?: XOR<MedicationCycleRelationFilter, MedicationCycleWhereInput>
  }

  export type MetricLogOrderByWithRelationInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    kind?: SortOrder
    valueFloat?: SortOrderInput | SortOrder
    valueText?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    cycle?: MedicationCycleOrderByWithRelationInput
  }

  export type MetricLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MetricLogWhereInput | MetricLogWhereInput[]
    OR?: MetricLogWhereInput[]
    NOT?: MetricLogWhereInput | MetricLogWhereInput[]
    cycleId?: IntFilter<"MetricLog"> | number
    date?: DateTimeFilter<"MetricLog"> | Date | string
    kind?: StringFilter<"MetricLog"> | string
    valueFloat?: FloatNullableFilter<"MetricLog"> | number | null
    valueText?: StringNullableFilter<"MetricLog"> | string | null
    notes?: StringNullableFilter<"MetricLog"> | string | null
    cycle?: XOR<MedicationCycleRelationFilter, MedicationCycleWhereInput>
  }, "id">

  export type MetricLogOrderByWithAggregationInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    kind?: SortOrder
    valueFloat?: SortOrderInput | SortOrder
    valueText?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: MetricLogCountOrderByAggregateInput
    _avg?: MetricLogAvgOrderByAggregateInput
    _max?: MetricLogMaxOrderByAggregateInput
    _min?: MetricLogMinOrderByAggregateInput
    _sum?: MetricLogSumOrderByAggregateInput
  }

  export type MetricLogScalarWhereWithAggregatesInput = {
    AND?: MetricLogScalarWhereWithAggregatesInput | MetricLogScalarWhereWithAggregatesInput[]
    OR?: MetricLogScalarWhereWithAggregatesInput[]
    NOT?: MetricLogScalarWhereWithAggregatesInput | MetricLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MetricLog"> | number
    cycleId?: IntWithAggregatesFilter<"MetricLog"> | number
    date?: DateTimeWithAggregatesFilter<"MetricLog"> | Date | string
    kind?: StringWithAggregatesFilter<"MetricLog"> | string
    valueFloat?: FloatNullableWithAggregatesFilter<"MetricLog"> | number | null
    valueText?: StringNullableWithAggregatesFilter<"MetricLog"> | string | null
    notes?: StringNullableWithAggregatesFilter<"MetricLog"> | string | null
  }

  export type DoseLogWhereInput = {
    AND?: DoseLogWhereInput | DoseLogWhereInput[]
    OR?: DoseLogWhereInput[]
    NOT?: DoseLogWhereInput | DoseLogWhereInput[]
    id?: IntFilter<"DoseLog"> | number
    cycleId?: IntFilter<"DoseLog"> | number
    date?: DateTimeFilter<"DoseLog"> | Date | string
    taken?: BoolFilter<"DoseLog"> | boolean
    cycle?: XOR<MedicationCycleRelationFilter, MedicationCycleWhereInput>
  }

  export type DoseLogOrderByWithRelationInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    taken?: SortOrder
    cycle?: MedicationCycleOrderByWithRelationInput
  }

  export type DoseLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    cycleId_date?: DoseLogCycleIdDateCompoundUniqueInput
    AND?: DoseLogWhereInput | DoseLogWhereInput[]
    OR?: DoseLogWhereInput[]
    NOT?: DoseLogWhereInput | DoseLogWhereInput[]
    cycleId?: IntFilter<"DoseLog"> | number
    date?: DateTimeFilter<"DoseLog"> | Date | string
    taken?: BoolFilter<"DoseLog"> | boolean
    cycle?: XOR<MedicationCycleRelationFilter, MedicationCycleWhereInput>
  }, "id" | "cycleId_date">

  export type DoseLogOrderByWithAggregationInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    taken?: SortOrder
    _count?: DoseLogCountOrderByAggregateInput
    _avg?: DoseLogAvgOrderByAggregateInput
    _max?: DoseLogMaxOrderByAggregateInput
    _min?: DoseLogMinOrderByAggregateInput
    _sum?: DoseLogSumOrderByAggregateInput
  }

  export type DoseLogScalarWhereWithAggregatesInput = {
    AND?: DoseLogScalarWhereWithAggregatesInput | DoseLogScalarWhereWithAggregatesInput[]
    OR?: DoseLogScalarWhereWithAggregatesInput[]
    NOT?: DoseLogScalarWhereWithAggregatesInput | DoseLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"DoseLog"> | number
    cycleId?: IntWithAggregatesFilter<"DoseLog"> | number
    date?: DateTimeWithAggregatesFilter<"DoseLog"> | Date | string
    taken?: BoolWithAggregatesFilter<"DoseLog"> | boolean
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    cycleId?: IntNullableFilter<"Notification"> | number | null
    date?: DateTimeFilter<"Notification"> | Date | string
    message?: StringFilter<"Notification"> | string
    sent?: BoolFilter<"Notification"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    cycle?: XOR<MedicationCycleNullableRelationFilter, MedicationCycleWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrderInput | SortOrder
    date?: SortOrder
    message?: SortOrder
    sent?: SortOrder
    user?: UserOrderByWithRelationInput
    cycle?: MedicationCycleOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    cycleId?: IntNullableFilter<"Notification"> | number | null
    date?: DateTimeFilter<"Notification"> | Date | string
    message?: StringFilter<"Notification"> | string
    sent?: BoolFilter<"Notification"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    cycle?: XOR<MedicationCycleNullableRelationFilter, MedicationCycleWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrderInput | SortOrder
    date?: SortOrder
    message?: SortOrder
    sent?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    cycleId?: IntNullableWithAggregatesFilter<"Notification"> | number | null
    date?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    sent?: BoolWithAggregatesFilter<"Notification"> | boolean
  }

  export type UserCreateInput = {
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicationCreateInput = {
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
    logs?: MedicationLogCreateNestedManyWithoutMedicationInput
    user: UserCreateNestedOneWithoutMedicationsInput
  }

  export type MedicationUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
    logs?: MedicationLogUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    logs?: MedicationLogUpdateManyWithoutMedicationNestedInput
    user?: UserUpdateOneRequiredWithoutMedicationsNestedInput
  }

  export type MedicationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    logs?: MedicationLogUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationCreateManyInput = {
    id?: number
    userId: number
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
  }

  export type MedicationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationLogCreateInput = {
    date: Date | string
    dosage: string
    medication: MedicationCreateNestedOneWithoutLogsInput
  }

  export type MedicationLogUncheckedCreateInput = {
    id?: number
    medicationId: number
    date: Date | string
    dosage: string
  }

  export type MedicationLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    medication?: MedicationUpdateOneRequiredWithoutLogsNestedInput
  }

  export type MedicationLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationLogCreateManyInput = {
    id?: number
    medicationId: number
    date: Date | string
    dosage: string
  }

  export type MedicationLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    medicationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MetricCreateInput = {
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
    user: UserCreateNestedOneWithoutMetricsInput
  }

  export type MetricUncheckedCreateInput = {
    id?: number
    userId: number
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
  }

  export type MetricUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutMetricsNestedInput
  }

  export type MetricUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetricCreateManyInput = {
    id?: number
    userId: number
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
  }

  export type MetricUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetricUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MedicationCycleCreateInput = {
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogCreateNestedManyWithoutCycleInput
    notifications?: NotificationCreateNestedManyWithoutCycleInput
    user: UserCreateNestedOneWithoutCyclesInput
  }

  export type MedicationCycleUncheckedCreateInput = {
    id?: number
    userId: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogUncheckedCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogUncheckedCreateNestedManyWithoutCycleInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUpdateManyWithoutCycleNestedInput
    user?: UserUpdateOneRequiredWithoutCyclesNestedInput
  }

  export type MedicationCycleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUncheckedUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUncheckedUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCycleNestedInput
  }

  export type MedicationCycleCreateManyInput = {
    id?: number
    userId: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
  }

  export type MedicationCycleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MedicationCycleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricLogCreateInput = {
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
    cycle: MedicationCycleCreateNestedOneWithoutMetricLogsInput
  }

  export type MetricLogUncheckedCreateInput = {
    id?: number
    cycleId: number
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
  }

  export type MetricLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    cycle?: MedicationCycleUpdateOneRequiredWithoutMetricLogsNestedInput
  }

  export type MetricLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricLogCreateManyInput = {
    id?: number
    cycleId: number
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
  }

  export type MetricLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoseLogCreateInput = {
    date: Date | string
    taken?: boolean
    cycle: MedicationCycleCreateNestedOneWithoutDoseLogsInput
  }

  export type DoseLogUncheckedCreateInput = {
    id?: number
    cycleId: number
    date: Date | string
    taken?: boolean
  }

  export type DoseLogUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
    cycle?: MedicationCycleUpdateOneRequiredWithoutDoseLogsNestedInput
  }

  export type DoseLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoseLogCreateManyInput = {
    id?: number
    cycleId: number
    date: Date | string
    taken?: boolean
  }

  export type DoseLogUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoseLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateInput = {
    date: Date | string
    message: string
    sent?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    cycle?: MedicationCycleCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    cycleId?: number | null
    date: Date | string
    message: string
    sent?: boolean
  }

  export type NotificationUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    cycle?: MedicationCycleUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cycleId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    cycleId?: number | null
    date: Date | string
    message: string
    sent?: boolean
  }

  export type NotificationUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    cycleId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MedicationListRelationFilter = {
    every?: MedicationWhereInput
    some?: MedicationWhereInput
    none?: MedicationWhereInput
  }

  export type MetricListRelationFilter = {
    every?: MetricWhereInput
    some?: MetricWhereInput
    none?: MetricWhereInput
  }

  export type MedicationCycleListRelationFilter = {
    every?: MedicationCycleWhereInput
    some?: MedicationCycleWhereInput
    none?: MedicationCycleWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MedicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MetricOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicationCycleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    is2FAEnabled?: SortOrder
    twoFASecret?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    is2FAEnabled?: SortOrder
    twoFASecret?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    resetToken?: SortOrder
    resetTokenExpiry?: SortOrder
    is2FAEnabled?: SortOrder
    twoFASecret?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MedicationLogListRelationFilter = {
    every?: MedicationLogWhereInput
    some?: MedicationLogWhereInput
    none?: MedicationLogWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type MedicationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dosage?: SortOrder
    frequency?: SortOrder
  }

  export type MedicationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type MedicationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dosage?: SortOrder
    frequency?: SortOrder
  }

  export type MedicationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dosage?: SortOrder
    frequency?: SortOrder
  }

  export type MedicationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type MedicationRelationFilter = {
    is?: MedicationWhereInput
    isNot?: MedicationWhereInput
  }

  export type MedicationLogCountOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    date?: SortOrder
    dosage?: SortOrder
  }

  export type MedicationLogAvgOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
  }

  export type MedicationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    date?: SortOrder
    dosage?: SortOrder
  }

  export type MedicationLogMinOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    date?: SortOrder
    dosage?: SortOrder
  }

  export type MedicationLogSumOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type MetricCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    bloodPressure?: SortOrder
    hipCircumference?: SortOrder
  }

  export type MetricAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    hipCircumference?: SortOrder
  }

  export type MetricMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    bloodPressure?: SortOrder
    hipCircumference?: SortOrder
  }

  export type MetricMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    bloodPressure?: SortOrder
    hipCircumference?: SortOrder
  }

  export type MetricSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    weight?: SortOrder
    height?: SortOrder
    bmi?: SortOrder
    hipCircumference?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type MetricLogListRelationFilter = {
    every?: MetricLogWhereInput
    some?: MetricLogWhereInput
    none?: MetricLogWhereInput
  }

  export type DoseLogListRelationFilter = {
    every?: DoseLogWhereInput
    some?: DoseLogWhereInput
    none?: DoseLogWhereInput
  }

  export type MetricLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DoseLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicationCycleCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
    metricsToMonitor?: SortOrder
  }

  export type MedicationCycleAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
  }

  export type MedicationCycleMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
    metricsToMonitor?: SortOrder
  }

  export type MedicationCycleMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
    metricsToMonitor?: SortOrder
  }

  export type MedicationCycleSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    frequencyDays?: SortOrder
    dosesPerDay?: SortOrder
  }

  export type MedicationCycleRelationFilter = {
    is?: MedicationCycleWhereInput
    isNot?: MedicationCycleWhereInput
  }

  export type MetricLogCountOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    kind?: SortOrder
    valueFloat?: SortOrder
    valueText?: SortOrder
    notes?: SortOrder
  }

  export type MetricLogAvgOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    valueFloat?: SortOrder
  }

  export type MetricLogMaxOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    kind?: SortOrder
    valueFloat?: SortOrder
    valueText?: SortOrder
    notes?: SortOrder
  }

  export type MetricLogMinOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    kind?: SortOrder
    valueFloat?: SortOrder
    valueText?: SortOrder
    notes?: SortOrder
  }

  export type MetricLogSumOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    valueFloat?: SortOrder
  }

  export type DoseLogCycleIdDateCompoundUniqueInput = {
    cycleId: number
    date: Date | string
  }

  export type DoseLogCountOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    taken?: SortOrder
  }

  export type DoseLogAvgOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
  }

  export type DoseLogMaxOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    taken?: SortOrder
  }

  export type DoseLogMinOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    taken?: SortOrder
  }

  export type DoseLogSumOrderByAggregateInput = {
    id?: SortOrder
    cycleId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type MedicationCycleNullableRelationFilter = {
    is?: MedicationCycleWhereInput | null
    isNot?: MedicationCycleWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    message?: SortOrder
    sent?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    message?: SortOrder
    sent?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrder
    date?: SortOrder
    message?: SortOrder
    sent?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    cycleId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MedicationCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type MetricCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
  }

  export type MedicationCycleCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput> | MedicationCycleCreateWithoutUserInput[] | MedicationCycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutUserInput | MedicationCycleCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCycleCreateManyUserInputEnvelope
    connect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MedicationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type MetricUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
  }

  export type MedicationCycleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput> | MedicationCycleCreateWithoutUserInput[] | MedicationCycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutUserInput | MedicationCycleCreateOrConnectWithoutUserInput[]
    createMany?: MedicationCycleCreateManyUserInputEnvelope
    connect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MedicationUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutUserInput | MedicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutUserInput | MedicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutUserInput | MedicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type MetricUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    upsert?: MetricUpsertWithWhereUniqueWithoutUserInput | MetricUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    set?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    disconnect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    delete?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    update?: MetricUpdateWithWhereUniqueWithoutUserInput | MetricUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricUpdateManyWithWhereWithoutUserInput | MetricUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricScalarWhereInput | MetricScalarWhereInput[]
  }

  export type MedicationCycleUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput> | MedicationCycleCreateWithoutUserInput[] | MedicationCycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutUserInput | MedicationCycleCreateOrConnectWithoutUserInput[]
    upsert?: MedicationCycleUpsertWithWhereUniqueWithoutUserInput | MedicationCycleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCycleCreateManyUserInputEnvelope
    set?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    disconnect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    delete?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    connect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    update?: MedicationCycleUpdateWithWhereUniqueWithoutUserInput | MedicationCycleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationCycleUpdateManyWithWhereWithoutUserInput | MedicationCycleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationCycleScalarWhereInput | MedicationCycleScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MedicationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput> | MedicationCreateWithoutUserInput[] | MedicationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutUserInput | MedicationCreateOrConnectWithoutUserInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutUserInput | MedicationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCreateManyUserInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutUserInput | MedicationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutUserInput | MedicationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type MetricUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput> | MetricCreateWithoutUserInput[] | MetricUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MetricCreateOrConnectWithoutUserInput | MetricCreateOrConnectWithoutUserInput[]
    upsert?: MetricUpsertWithWhereUniqueWithoutUserInput | MetricUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MetricCreateManyUserInputEnvelope
    set?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    disconnect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    delete?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    connect?: MetricWhereUniqueInput | MetricWhereUniqueInput[]
    update?: MetricUpdateWithWhereUniqueWithoutUserInput | MetricUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MetricUpdateManyWithWhereWithoutUserInput | MetricUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MetricScalarWhereInput | MetricScalarWhereInput[]
  }

  export type MedicationCycleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput> | MedicationCycleCreateWithoutUserInput[] | MedicationCycleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutUserInput | MedicationCycleCreateOrConnectWithoutUserInput[]
    upsert?: MedicationCycleUpsertWithWhereUniqueWithoutUserInput | MedicationCycleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MedicationCycleCreateManyUserInputEnvelope
    set?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    disconnect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    delete?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    connect?: MedicationCycleWhereUniqueInput | MedicationCycleWhereUniqueInput[]
    update?: MedicationCycleUpdateWithWhereUniqueWithoutUserInput | MedicationCycleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MedicationCycleUpdateManyWithWhereWithoutUserInput | MedicationCycleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MedicationCycleScalarWhereInput | MedicationCycleScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MedicationLogCreateNestedManyWithoutMedicationInput = {
    create?: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput> | MedicationLogCreateWithoutMedicationInput[] | MedicationLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: MedicationLogCreateOrConnectWithoutMedicationInput | MedicationLogCreateOrConnectWithoutMedicationInput[]
    createMany?: MedicationLogCreateManyMedicationInputEnvelope
    connect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutMedicationsInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    connect?: UserWhereUniqueInput
  }

  export type MedicationLogUncheckedCreateNestedManyWithoutMedicationInput = {
    create?: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput> | MedicationLogCreateWithoutMedicationInput[] | MedicationLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: MedicationLogCreateOrConnectWithoutMedicationInput | MedicationLogCreateOrConnectWithoutMedicationInput[]
    createMany?: MedicationLogCreateManyMedicationInputEnvelope
    connect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MedicationLogUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput> | MedicationLogCreateWithoutMedicationInput[] | MedicationLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: MedicationLogCreateOrConnectWithoutMedicationInput | MedicationLogCreateOrConnectWithoutMedicationInput[]
    upsert?: MedicationLogUpsertWithWhereUniqueWithoutMedicationInput | MedicationLogUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: MedicationLogCreateManyMedicationInputEnvelope
    set?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    disconnect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    delete?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    connect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    update?: MedicationLogUpdateWithWhereUniqueWithoutMedicationInput | MedicationLogUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: MedicationLogUpdateManyWithWhereWithoutMedicationInput | MedicationLogUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: MedicationLogScalarWhereInput | MedicationLogScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutMedicationsNestedInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    upsert?: UserUpsertWithoutMedicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMedicationsInput, UserUpdateWithoutMedicationsInput>, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type MedicationLogUncheckedUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput> | MedicationLogCreateWithoutMedicationInput[] | MedicationLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: MedicationLogCreateOrConnectWithoutMedicationInput | MedicationLogCreateOrConnectWithoutMedicationInput[]
    upsert?: MedicationLogUpsertWithWhereUniqueWithoutMedicationInput | MedicationLogUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: MedicationLogCreateManyMedicationInputEnvelope
    set?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    disconnect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    delete?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    connect?: MedicationLogWhereUniqueInput | MedicationLogWhereUniqueInput[]
    update?: MedicationLogUpdateWithWhereUniqueWithoutMedicationInput | MedicationLogUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: MedicationLogUpdateManyWithWhereWithoutMedicationInput | MedicationLogUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: MedicationLogScalarWhereInput | MedicationLogScalarWhereInput[]
  }

  export type MedicationCreateNestedOneWithoutLogsInput = {
    create?: XOR<MedicationCreateWithoutLogsInput, MedicationUncheckedCreateWithoutLogsInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutLogsInput
    connect?: MedicationWhereUniqueInput
  }

  export type MedicationUpdateOneRequiredWithoutLogsNestedInput = {
    create?: XOR<MedicationCreateWithoutLogsInput, MedicationUncheckedCreateWithoutLogsInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutLogsInput
    upsert?: MedicationUpsertWithoutLogsInput
    connect?: MedicationWhereUniqueInput
    update?: XOR<XOR<MedicationUpdateToOneWithWhereWithoutLogsInput, MedicationUpdateWithoutLogsInput>, MedicationUncheckedUpdateWithoutLogsInput>
  }

  export type UserCreateNestedOneWithoutMetricsInput = {
    create?: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricsInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutMetricsNestedInput = {
    create?: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMetricsInput
    upsert?: UserUpsertWithoutMetricsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMetricsInput, UserUpdateWithoutMetricsInput>, UserUncheckedUpdateWithoutMetricsInput>
  }

  export type MetricLogCreateNestedManyWithoutCycleInput = {
    create?: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput> | MetricLogCreateWithoutCycleInput[] | MetricLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: MetricLogCreateOrConnectWithoutCycleInput | MetricLogCreateOrConnectWithoutCycleInput[]
    createMany?: MetricLogCreateManyCycleInputEnvelope
    connect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
  }

  export type DoseLogCreateNestedManyWithoutCycleInput = {
    create?: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput> | DoseLogCreateWithoutCycleInput[] | DoseLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: DoseLogCreateOrConnectWithoutCycleInput | DoseLogCreateOrConnectWithoutCycleInput[]
    createMany?: DoseLogCreateManyCycleInputEnvelope
    connect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutCycleInput = {
    create?: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput> | NotificationCreateWithoutCycleInput[] | NotificationUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCycleInput | NotificationCreateOrConnectWithoutCycleInput[]
    createMany?: NotificationCreateManyCycleInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCyclesInput = {
    create?: XOR<UserCreateWithoutCyclesInput, UserUncheckedCreateWithoutCyclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCyclesInput
    connect?: UserWhereUniqueInput
  }

  export type MetricLogUncheckedCreateNestedManyWithoutCycleInput = {
    create?: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput> | MetricLogCreateWithoutCycleInput[] | MetricLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: MetricLogCreateOrConnectWithoutCycleInput | MetricLogCreateOrConnectWithoutCycleInput[]
    createMany?: MetricLogCreateManyCycleInputEnvelope
    connect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
  }

  export type DoseLogUncheckedCreateNestedManyWithoutCycleInput = {
    create?: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput> | DoseLogCreateWithoutCycleInput[] | DoseLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: DoseLogCreateOrConnectWithoutCycleInput | DoseLogCreateOrConnectWithoutCycleInput[]
    createMany?: DoseLogCreateManyCycleInputEnvelope
    connect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutCycleInput = {
    create?: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput> | NotificationCreateWithoutCycleInput[] | NotificationUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCycleInput | NotificationCreateOrConnectWithoutCycleInput[]
    createMany?: NotificationCreateManyCycleInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type MetricLogUpdateManyWithoutCycleNestedInput = {
    create?: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput> | MetricLogCreateWithoutCycleInput[] | MetricLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: MetricLogCreateOrConnectWithoutCycleInput | MetricLogCreateOrConnectWithoutCycleInput[]
    upsert?: MetricLogUpsertWithWhereUniqueWithoutCycleInput | MetricLogUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: MetricLogCreateManyCycleInputEnvelope
    set?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    disconnect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    delete?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    connect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    update?: MetricLogUpdateWithWhereUniqueWithoutCycleInput | MetricLogUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: MetricLogUpdateManyWithWhereWithoutCycleInput | MetricLogUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: MetricLogScalarWhereInput | MetricLogScalarWhereInput[]
  }

  export type DoseLogUpdateManyWithoutCycleNestedInput = {
    create?: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput> | DoseLogCreateWithoutCycleInput[] | DoseLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: DoseLogCreateOrConnectWithoutCycleInput | DoseLogCreateOrConnectWithoutCycleInput[]
    upsert?: DoseLogUpsertWithWhereUniqueWithoutCycleInput | DoseLogUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: DoseLogCreateManyCycleInputEnvelope
    set?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    disconnect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    delete?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    connect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    update?: DoseLogUpdateWithWhereUniqueWithoutCycleInput | DoseLogUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: DoseLogUpdateManyWithWhereWithoutCycleInput | DoseLogUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: DoseLogScalarWhereInput | DoseLogScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutCycleNestedInput = {
    create?: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput> | NotificationCreateWithoutCycleInput[] | NotificationUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCycleInput | NotificationCreateOrConnectWithoutCycleInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCycleInput | NotificationUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: NotificationCreateManyCycleInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCycleInput | NotificationUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCycleInput | NotificationUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCyclesNestedInput = {
    create?: XOR<UserCreateWithoutCyclesInput, UserUncheckedCreateWithoutCyclesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCyclesInput
    upsert?: UserUpsertWithoutCyclesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCyclesInput, UserUpdateWithoutCyclesInput>, UserUncheckedUpdateWithoutCyclesInput>
  }

  export type MetricLogUncheckedUpdateManyWithoutCycleNestedInput = {
    create?: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput> | MetricLogCreateWithoutCycleInput[] | MetricLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: MetricLogCreateOrConnectWithoutCycleInput | MetricLogCreateOrConnectWithoutCycleInput[]
    upsert?: MetricLogUpsertWithWhereUniqueWithoutCycleInput | MetricLogUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: MetricLogCreateManyCycleInputEnvelope
    set?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    disconnect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    delete?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    connect?: MetricLogWhereUniqueInput | MetricLogWhereUniqueInput[]
    update?: MetricLogUpdateWithWhereUniqueWithoutCycleInput | MetricLogUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: MetricLogUpdateManyWithWhereWithoutCycleInput | MetricLogUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: MetricLogScalarWhereInput | MetricLogScalarWhereInput[]
  }

  export type DoseLogUncheckedUpdateManyWithoutCycleNestedInput = {
    create?: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput> | DoseLogCreateWithoutCycleInput[] | DoseLogUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: DoseLogCreateOrConnectWithoutCycleInput | DoseLogCreateOrConnectWithoutCycleInput[]
    upsert?: DoseLogUpsertWithWhereUniqueWithoutCycleInput | DoseLogUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: DoseLogCreateManyCycleInputEnvelope
    set?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    disconnect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    delete?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    connect?: DoseLogWhereUniqueInput | DoseLogWhereUniqueInput[]
    update?: DoseLogUpdateWithWhereUniqueWithoutCycleInput | DoseLogUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: DoseLogUpdateManyWithWhereWithoutCycleInput | DoseLogUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: DoseLogScalarWhereInput | DoseLogScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutCycleNestedInput = {
    create?: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput> | NotificationCreateWithoutCycleInput[] | NotificationUncheckedCreateWithoutCycleInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutCycleInput | NotificationCreateOrConnectWithoutCycleInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutCycleInput | NotificationUpsertWithWhereUniqueWithoutCycleInput[]
    createMany?: NotificationCreateManyCycleInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutCycleInput | NotificationUpdateWithWhereUniqueWithoutCycleInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutCycleInput | NotificationUpdateManyWithWhereWithoutCycleInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type MedicationCycleCreateNestedOneWithoutMetricLogsInput = {
    create?: XOR<MedicationCycleCreateWithoutMetricLogsInput, MedicationCycleUncheckedCreateWithoutMetricLogsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutMetricLogsInput
    connect?: MedicationCycleWhereUniqueInput
  }

  export type MedicationCycleUpdateOneRequiredWithoutMetricLogsNestedInput = {
    create?: XOR<MedicationCycleCreateWithoutMetricLogsInput, MedicationCycleUncheckedCreateWithoutMetricLogsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutMetricLogsInput
    upsert?: MedicationCycleUpsertWithoutMetricLogsInput
    connect?: MedicationCycleWhereUniqueInput
    update?: XOR<XOR<MedicationCycleUpdateToOneWithWhereWithoutMetricLogsInput, MedicationCycleUpdateWithoutMetricLogsInput>, MedicationCycleUncheckedUpdateWithoutMetricLogsInput>
  }

  export type MedicationCycleCreateNestedOneWithoutDoseLogsInput = {
    create?: XOR<MedicationCycleCreateWithoutDoseLogsInput, MedicationCycleUncheckedCreateWithoutDoseLogsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutDoseLogsInput
    connect?: MedicationCycleWhereUniqueInput
  }

  export type MedicationCycleUpdateOneRequiredWithoutDoseLogsNestedInput = {
    create?: XOR<MedicationCycleCreateWithoutDoseLogsInput, MedicationCycleUncheckedCreateWithoutDoseLogsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutDoseLogsInput
    upsert?: MedicationCycleUpsertWithoutDoseLogsInput
    connect?: MedicationCycleWhereUniqueInput
    update?: XOR<XOR<MedicationCycleUpdateToOneWithWhereWithoutDoseLogsInput, MedicationCycleUpdateWithoutDoseLogsInput>, MedicationCycleUncheckedUpdateWithoutDoseLogsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type MedicationCycleCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<MedicationCycleCreateWithoutNotificationsInput, MedicationCycleUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutNotificationsInput
    connect?: MedicationCycleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type MedicationCycleUpdateOneWithoutNotificationsNestedInput = {
    create?: XOR<MedicationCycleCreateWithoutNotificationsInput, MedicationCycleUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MedicationCycleCreateOrConnectWithoutNotificationsInput
    upsert?: MedicationCycleUpsertWithoutNotificationsInput
    disconnect?: MedicationCycleWhereInput | boolean
    delete?: MedicationCycleWhereInput | boolean
    connect?: MedicationCycleWhereUniqueInput
    update?: XOR<XOR<MedicationCycleUpdateToOneWithWhereWithoutNotificationsInput, MedicationCycleUpdateWithoutNotificationsInput>, MedicationCycleUncheckedUpdateWithoutNotificationsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type MedicationCreateWithoutUserInput = {
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
    logs?: MedicationLogCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
    logs?: MedicationLogUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationCreateOrConnectWithoutUserInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput>
  }

  export type MedicationCreateManyUserInputEnvelope = {
    data: MedicationCreateManyUserInput | MedicationCreateManyUserInput[]
  }

  export type MetricCreateWithoutUserInput = {
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
  }

  export type MetricUncheckedCreateWithoutUserInput = {
    id?: number
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
  }

  export type MetricCreateOrConnectWithoutUserInput = {
    where: MetricWhereUniqueInput
    create: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput>
  }

  export type MetricCreateManyUserInputEnvelope = {
    data: MetricCreateManyUserInput | MetricCreateManyUserInput[]
  }

  export type MedicationCycleCreateWithoutUserInput = {
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogCreateNestedManyWithoutCycleInput
    notifications?: NotificationCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleUncheckedCreateWithoutUserInput = {
    id?: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogUncheckedCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogUncheckedCreateNestedManyWithoutCycleInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleCreateOrConnectWithoutUserInput = {
    where: MedicationCycleWhereUniqueInput
    create: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput>
  }

  export type MedicationCycleCreateManyUserInputEnvelope = {
    data: MedicationCycleCreateManyUserInput | MedicationCycleCreateManyUserInput[]
  }

  export type NotificationCreateWithoutUserInput = {
    date: Date | string
    message: string
    sent?: boolean
    cycle?: MedicationCycleCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    cycleId?: number | null
    date: Date | string
    message: string
    sent?: boolean
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
  }

  export type MedicationUpsertWithWhereUniqueWithoutUserInput = {
    where: MedicationWhereUniqueInput
    update: XOR<MedicationUpdateWithoutUserInput, MedicationUncheckedUpdateWithoutUserInput>
    create: XOR<MedicationCreateWithoutUserInput, MedicationUncheckedCreateWithoutUserInput>
  }

  export type MedicationUpdateWithWhereUniqueWithoutUserInput = {
    where: MedicationWhereUniqueInput
    data: XOR<MedicationUpdateWithoutUserInput, MedicationUncheckedUpdateWithoutUserInput>
  }

  export type MedicationUpdateManyWithWhereWithoutUserInput = {
    where: MedicationScalarWhereInput
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyWithoutUserInput>
  }

  export type MedicationScalarWhereInput = {
    AND?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    OR?: MedicationScalarWhereInput[]
    NOT?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    id?: IntFilter<"Medication"> | number
    userId?: IntFilter<"Medication"> | number
    name?: StringFilter<"Medication"> | string
    startDate?: DateTimeFilter<"Medication"> | Date | string
    endDate?: DateTimeFilter<"Medication"> | Date | string
    dosage?: StringFilter<"Medication"> | string
    frequency?: StringFilter<"Medication"> | string
  }

  export type MetricUpsertWithWhereUniqueWithoutUserInput = {
    where: MetricWhereUniqueInput
    update: XOR<MetricUpdateWithoutUserInput, MetricUncheckedUpdateWithoutUserInput>
    create: XOR<MetricCreateWithoutUserInput, MetricUncheckedCreateWithoutUserInput>
  }

  export type MetricUpdateWithWhereUniqueWithoutUserInput = {
    where: MetricWhereUniqueInput
    data: XOR<MetricUpdateWithoutUserInput, MetricUncheckedUpdateWithoutUserInput>
  }

  export type MetricUpdateManyWithWhereWithoutUserInput = {
    where: MetricScalarWhereInput
    data: XOR<MetricUpdateManyMutationInput, MetricUncheckedUpdateManyWithoutUserInput>
  }

  export type MetricScalarWhereInput = {
    AND?: MetricScalarWhereInput | MetricScalarWhereInput[]
    OR?: MetricScalarWhereInput[]
    NOT?: MetricScalarWhereInput | MetricScalarWhereInput[]
    id?: IntFilter<"Metric"> | number
    userId?: IntFilter<"Metric"> | number
    date?: DateTimeFilter<"Metric"> | Date | string
    weight?: FloatFilter<"Metric"> | number
    height?: FloatFilter<"Metric"> | number
    bmi?: FloatFilter<"Metric"> | number
    bloodPressure?: StringFilter<"Metric"> | string
    hipCircumference?: FloatNullableFilter<"Metric"> | number | null
  }

  export type MedicationCycleUpsertWithWhereUniqueWithoutUserInput = {
    where: MedicationCycleWhereUniqueInput
    update: XOR<MedicationCycleUpdateWithoutUserInput, MedicationCycleUncheckedUpdateWithoutUserInput>
    create: XOR<MedicationCycleCreateWithoutUserInput, MedicationCycleUncheckedCreateWithoutUserInput>
  }

  export type MedicationCycleUpdateWithWhereUniqueWithoutUserInput = {
    where: MedicationCycleWhereUniqueInput
    data: XOR<MedicationCycleUpdateWithoutUserInput, MedicationCycleUncheckedUpdateWithoutUserInput>
  }

  export type MedicationCycleUpdateManyWithWhereWithoutUserInput = {
    where: MedicationCycleScalarWhereInput
    data: XOR<MedicationCycleUpdateManyMutationInput, MedicationCycleUncheckedUpdateManyWithoutUserInput>
  }

  export type MedicationCycleScalarWhereInput = {
    AND?: MedicationCycleScalarWhereInput | MedicationCycleScalarWhereInput[]
    OR?: MedicationCycleScalarWhereInput[]
    NOT?: MedicationCycleScalarWhereInput | MedicationCycleScalarWhereInput[]
    id?: IntFilter<"MedicationCycle"> | number
    userId?: IntFilter<"MedicationCycle"> | number
    name?: StringFilter<"MedicationCycle"> | string
    dosage?: StringFilter<"MedicationCycle"> | string
    startDate?: DateTimeFilter<"MedicationCycle"> | Date | string
    endDate?: DateTimeNullableFilter<"MedicationCycle"> | Date | string | null
    frequencyDays?: IntFilter<"MedicationCycle"> | number
    dosesPerDay?: IntFilter<"MedicationCycle"> | number
    metricsToMonitor?: StringNullableFilter<"MedicationCycle"> | string | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    cycleId?: IntNullableFilter<"Notification"> | number | null
    date?: DateTimeFilter<"Notification"> | Date | string
    message?: StringFilter<"Notification"> | string
    sent?: BoolFilter<"Notification"> | boolean
  }

  export type MedicationLogCreateWithoutMedicationInput = {
    date: Date | string
    dosage: string
  }

  export type MedicationLogUncheckedCreateWithoutMedicationInput = {
    id?: number
    date: Date | string
    dosage: string
  }

  export type MedicationLogCreateOrConnectWithoutMedicationInput = {
    where: MedicationLogWhereUniqueInput
    create: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput>
  }

  export type MedicationLogCreateManyMedicationInputEnvelope = {
    data: MedicationLogCreateManyMedicationInput | MedicationLogCreateManyMedicationInput[]
  }

  export type UserCreateWithoutMedicationsInput = {
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    metrics?: MetricCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMedicationsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMedicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
  }

  export type MedicationLogUpsertWithWhereUniqueWithoutMedicationInput = {
    where: MedicationLogWhereUniqueInput
    update: XOR<MedicationLogUpdateWithoutMedicationInput, MedicationLogUncheckedUpdateWithoutMedicationInput>
    create: XOR<MedicationLogCreateWithoutMedicationInput, MedicationLogUncheckedCreateWithoutMedicationInput>
  }

  export type MedicationLogUpdateWithWhereUniqueWithoutMedicationInput = {
    where: MedicationLogWhereUniqueInput
    data: XOR<MedicationLogUpdateWithoutMedicationInput, MedicationLogUncheckedUpdateWithoutMedicationInput>
  }

  export type MedicationLogUpdateManyWithWhereWithoutMedicationInput = {
    where: MedicationLogScalarWhereInput
    data: XOR<MedicationLogUpdateManyMutationInput, MedicationLogUncheckedUpdateManyWithoutMedicationInput>
  }

  export type MedicationLogScalarWhereInput = {
    AND?: MedicationLogScalarWhereInput | MedicationLogScalarWhereInput[]
    OR?: MedicationLogScalarWhereInput[]
    NOT?: MedicationLogScalarWhereInput | MedicationLogScalarWhereInput[]
    id?: IntFilter<"MedicationLog"> | number
    medicationId?: IntFilter<"MedicationLog"> | number
    date?: DateTimeFilter<"MedicationLog"> | Date | string
    dosage?: StringFilter<"MedicationLog"> | string
  }

  export type UserUpsertWithoutMedicationsInput = {
    update: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMedicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type UserUpdateWithoutMedicationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: MetricUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMedicationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MedicationCreateWithoutLogsInput = {
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
    user: UserCreateNestedOneWithoutMedicationsInput
  }

  export type MedicationUncheckedCreateWithoutLogsInput = {
    id?: number
    userId: number
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
  }

  export type MedicationCreateOrConnectWithoutLogsInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutLogsInput, MedicationUncheckedCreateWithoutLogsInput>
  }

  export type MedicationUpsertWithoutLogsInput = {
    update: XOR<MedicationUpdateWithoutLogsInput, MedicationUncheckedUpdateWithoutLogsInput>
    create: XOR<MedicationCreateWithoutLogsInput, MedicationUncheckedCreateWithoutLogsInput>
    where?: MedicationWhereInput
  }

  export type MedicationUpdateToOneWithWhereWithoutLogsInput = {
    where?: MedicationWhereInput
    data: XOR<MedicationUpdateWithoutLogsInput, MedicationUncheckedUpdateWithoutLogsInput>
  }

  export type MedicationUpdateWithoutLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMedicationsNestedInput
  }

  export type MedicationUncheckedUpdateWithoutLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutMetricsInput = {
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMetricsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMetricsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
  }

  export type UserUpsertWithoutMetricsInput = {
    update: XOR<UserUpdateWithoutMetricsInput, UserUncheckedUpdateWithoutMetricsInput>
    create: XOR<UserCreateWithoutMetricsInput, UserUncheckedCreateWithoutMetricsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMetricsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMetricsInput, UserUncheckedUpdateWithoutMetricsInput>
  }

  export type UserUpdateWithoutMetricsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMetricsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MetricLogCreateWithoutCycleInput = {
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
  }

  export type MetricLogUncheckedCreateWithoutCycleInput = {
    id?: number
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
  }

  export type MetricLogCreateOrConnectWithoutCycleInput = {
    where: MetricLogWhereUniqueInput
    create: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput>
  }

  export type MetricLogCreateManyCycleInputEnvelope = {
    data: MetricLogCreateManyCycleInput | MetricLogCreateManyCycleInput[]
  }

  export type DoseLogCreateWithoutCycleInput = {
    date: Date | string
    taken?: boolean
  }

  export type DoseLogUncheckedCreateWithoutCycleInput = {
    id?: number
    date: Date | string
    taken?: boolean
  }

  export type DoseLogCreateOrConnectWithoutCycleInput = {
    where: DoseLogWhereUniqueInput
    create: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput>
  }

  export type DoseLogCreateManyCycleInputEnvelope = {
    data: DoseLogCreateManyCycleInput | DoseLogCreateManyCycleInput[]
  }

  export type NotificationCreateWithoutCycleInput = {
    date: Date | string
    message: string
    sent?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateWithoutCycleInput = {
    id?: number
    userId: number
    date: Date | string
    message: string
    sent?: boolean
  }

  export type NotificationCreateOrConnectWithoutCycleInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput>
  }

  export type NotificationCreateManyCycleInputEnvelope = {
    data: NotificationCreateManyCycleInput | NotificationCreateManyCycleInput[]
  }

  export type UserCreateWithoutCyclesInput = {
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCyclesInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCyclesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCyclesInput, UserUncheckedCreateWithoutCyclesInput>
  }

  export type MetricLogUpsertWithWhereUniqueWithoutCycleInput = {
    where: MetricLogWhereUniqueInput
    update: XOR<MetricLogUpdateWithoutCycleInput, MetricLogUncheckedUpdateWithoutCycleInput>
    create: XOR<MetricLogCreateWithoutCycleInput, MetricLogUncheckedCreateWithoutCycleInput>
  }

  export type MetricLogUpdateWithWhereUniqueWithoutCycleInput = {
    where: MetricLogWhereUniqueInput
    data: XOR<MetricLogUpdateWithoutCycleInput, MetricLogUncheckedUpdateWithoutCycleInput>
  }

  export type MetricLogUpdateManyWithWhereWithoutCycleInput = {
    where: MetricLogScalarWhereInput
    data: XOR<MetricLogUpdateManyMutationInput, MetricLogUncheckedUpdateManyWithoutCycleInput>
  }

  export type MetricLogScalarWhereInput = {
    AND?: MetricLogScalarWhereInput | MetricLogScalarWhereInput[]
    OR?: MetricLogScalarWhereInput[]
    NOT?: MetricLogScalarWhereInput | MetricLogScalarWhereInput[]
    id?: IntFilter<"MetricLog"> | number
    cycleId?: IntFilter<"MetricLog"> | number
    date?: DateTimeFilter<"MetricLog"> | Date | string
    kind?: StringFilter<"MetricLog"> | string
    valueFloat?: FloatNullableFilter<"MetricLog"> | number | null
    valueText?: StringNullableFilter<"MetricLog"> | string | null
    notes?: StringNullableFilter<"MetricLog"> | string | null
  }

  export type DoseLogUpsertWithWhereUniqueWithoutCycleInput = {
    where: DoseLogWhereUniqueInput
    update: XOR<DoseLogUpdateWithoutCycleInput, DoseLogUncheckedUpdateWithoutCycleInput>
    create: XOR<DoseLogCreateWithoutCycleInput, DoseLogUncheckedCreateWithoutCycleInput>
  }

  export type DoseLogUpdateWithWhereUniqueWithoutCycleInput = {
    where: DoseLogWhereUniqueInput
    data: XOR<DoseLogUpdateWithoutCycleInput, DoseLogUncheckedUpdateWithoutCycleInput>
  }

  export type DoseLogUpdateManyWithWhereWithoutCycleInput = {
    where: DoseLogScalarWhereInput
    data: XOR<DoseLogUpdateManyMutationInput, DoseLogUncheckedUpdateManyWithoutCycleInput>
  }

  export type DoseLogScalarWhereInput = {
    AND?: DoseLogScalarWhereInput | DoseLogScalarWhereInput[]
    OR?: DoseLogScalarWhereInput[]
    NOT?: DoseLogScalarWhereInput | DoseLogScalarWhereInput[]
    id?: IntFilter<"DoseLog"> | number
    cycleId?: IntFilter<"DoseLog"> | number
    date?: DateTimeFilter<"DoseLog"> | Date | string
    taken?: BoolFilter<"DoseLog"> | boolean
  }

  export type NotificationUpsertWithWhereUniqueWithoutCycleInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutCycleInput, NotificationUncheckedUpdateWithoutCycleInput>
    create: XOR<NotificationCreateWithoutCycleInput, NotificationUncheckedCreateWithoutCycleInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutCycleInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutCycleInput, NotificationUncheckedUpdateWithoutCycleInput>
  }

  export type NotificationUpdateManyWithWhereWithoutCycleInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutCycleInput>
  }

  export type UserUpsertWithoutCyclesInput = {
    update: XOR<UserUpdateWithoutCyclesInput, UserUncheckedUpdateWithoutCyclesInput>
    create: XOR<UserCreateWithoutCyclesInput, UserUncheckedCreateWithoutCyclesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCyclesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCyclesInput, UserUncheckedUpdateWithoutCyclesInput>
  }

  export type UserUpdateWithoutCyclesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCyclesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MedicationCycleCreateWithoutMetricLogsInput = {
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    doseLogs?: DoseLogCreateNestedManyWithoutCycleInput
    notifications?: NotificationCreateNestedManyWithoutCycleInput
    user: UserCreateNestedOneWithoutCyclesInput
  }

  export type MedicationCycleUncheckedCreateWithoutMetricLogsInput = {
    id?: number
    userId: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    doseLogs?: DoseLogUncheckedCreateNestedManyWithoutCycleInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleCreateOrConnectWithoutMetricLogsInput = {
    where: MedicationCycleWhereUniqueInput
    create: XOR<MedicationCycleCreateWithoutMetricLogsInput, MedicationCycleUncheckedCreateWithoutMetricLogsInput>
  }

  export type MedicationCycleUpsertWithoutMetricLogsInput = {
    update: XOR<MedicationCycleUpdateWithoutMetricLogsInput, MedicationCycleUncheckedUpdateWithoutMetricLogsInput>
    create: XOR<MedicationCycleCreateWithoutMetricLogsInput, MedicationCycleUncheckedCreateWithoutMetricLogsInput>
    where?: MedicationCycleWhereInput
  }

  export type MedicationCycleUpdateToOneWithWhereWithoutMetricLogsInput = {
    where?: MedicationCycleWhereInput
    data: XOR<MedicationCycleUpdateWithoutMetricLogsInput, MedicationCycleUncheckedUpdateWithoutMetricLogsInput>
  }

  export type MedicationCycleUpdateWithoutMetricLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    doseLogs?: DoseLogUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUpdateManyWithoutCycleNestedInput
    user?: UserUpdateOneRequiredWithoutCyclesNestedInput
  }

  export type MedicationCycleUncheckedUpdateWithoutMetricLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    doseLogs?: DoseLogUncheckedUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCycleNestedInput
  }

  export type MedicationCycleCreateWithoutDoseLogsInput = {
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogCreateNestedManyWithoutCycleInput
    notifications?: NotificationCreateNestedManyWithoutCycleInput
    user: UserCreateNestedOneWithoutCyclesInput
  }

  export type MedicationCycleUncheckedCreateWithoutDoseLogsInput = {
    id?: number
    userId: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogUncheckedCreateNestedManyWithoutCycleInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleCreateOrConnectWithoutDoseLogsInput = {
    where: MedicationCycleWhereUniqueInput
    create: XOR<MedicationCycleCreateWithoutDoseLogsInput, MedicationCycleUncheckedCreateWithoutDoseLogsInput>
  }

  export type MedicationCycleUpsertWithoutDoseLogsInput = {
    update: XOR<MedicationCycleUpdateWithoutDoseLogsInput, MedicationCycleUncheckedUpdateWithoutDoseLogsInput>
    create: XOR<MedicationCycleCreateWithoutDoseLogsInput, MedicationCycleUncheckedCreateWithoutDoseLogsInput>
    where?: MedicationCycleWhereInput
  }

  export type MedicationCycleUpdateToOneWithWhereWithoutDoseLogsInput = {
    where?: MedicationCycleWhereInput
    data: XOR<MedicationCycleUpdateWithoutDoseLogsInput, MedicationCycleUncheckedUpdateWithoutDoseLogsInput>
  }

  export type MedicationCycleUpdateWithoutDoseLogsInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUpdateManyWithoutCycleNestedInput
    user?: UserUpdateOneRequiredWithoutCyclesNestedInput
  }

  export type MedicationCycleUncheckedUpdateWithoutDoseLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUncheckedUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCycleNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationCreateNestedManyWithoutUserInput
    metrics?: MetricCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    email: string
    password: string
    name?: string | null
    resetToken?: string | null
    resetTokenExpiry?: Date | string | null
    is2FAEnabled?: boolean
    twoFASecret?: string | null
    medications?: MedicationUncheckedCreateNestedManyWithoutUserInput
    metrics?: MetricUncheckedCreateNestedManyWithoutUserInput
    cycles?: MedicationCycleUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type MedicationCycleCreateWithoutNotificationsInput = {
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogCreateNestedManyWithoutCycleInput
    user: UserCreateNestedOneWithoutCyclesInput
  }

  export type MedicationCycleUncheckedCreateWithoutNotificationsInput = {
    id?: number
    userId: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
    metricLogs?: MetricLogUncheckedCreateNestedManyWithoutCycleInput
    doseLogs?: DoseLogUncheckedCreateNestedManyWithoutCycleInput
  }

  export type MedicationCycleCreateOrConnectWithoutNotificationsInput = {
    where: MedicationCycleWhereUniqueInput
    create: XOR<MedicationCycleCreateWithoutNotificationsInput, MedicationCycleUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUpdateManyWithoutUserNestedInput
    metrics?: MetricUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    resetToken?: NullableStringFieldUpdateOperationsInput | string | null
    resetTokenExpiry?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    is2FAEnabled?: BoolFieldUpdateOperationsInput | boolean
    twoFASecret?: NullableStringFieldUpdateOperationsInput | string | null
    medications?: MedicationUncheckedUpdateManyWithoutUserNestedInput
    metrics?: MetricUncheckedUpdateManyWithoutUserNestedInput
    cycles?: MedicationCycleUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MedicationCycleUpsertWithoutNotificationsInput = {
    update: XOR<MedicationCycleUpdateWithoutNotificationsInput, MedicationCycleUncheckedUpdateWithoutNotificationsInput>
    create: XOR<MedicationCycleCreateWithoutNotificationsInput, MedicationCycleUncheckedCreateWithoutNotificationsInput>
    where?: MedicationCycleWhereInput
  }

  export type MedicationCycleUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: MedicationCycleWhereInput
    data: XOR<MedicationCycleUpdateWithoutNotificationsInput, MedicationCycleUncheckedUpdateWithoutNotificationsInput>
  }

  export type MedicationCycleUpdateWithoutNotificationsInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUpdateManyWithoutCycleNestedInput
    user?: UserUpdateOneRequiredWithoutCyclesNestedInput
  }

  export type MedicationCycleUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUncheckedUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUncheckedUpdateManyWithoutCycleNestedInput
  }

  export type MedicationCreateManyUserInput = {
    id?: number
    name: string
    startDate: Date | string
    endDate: Date | string
    dosage: string
    frequency: string
  }

  export type MetricCreateManyUserInput = {
    id?: number
    date?: Date | string
    weight: number
    height: number
    bmi: number
    bloodPressure: string
    hipCircumference?: number | null
  }

  export type MedicationCycleCreateManyUserInput = {
    id?: number
    name: string
    dosage: string
    startDate: Date | string
    endDate?: Date | string | null
    frequencyDays: number
    dosesPerDay?: number
    metricsToMonitor?: string | null
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    cycleId?: number | null
    date: Date | string
    message: string
    sent?: boolean
  }

  export type MedicationUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    logs?: MedicationLogUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
    logs?: MedicationLogUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
    frequency?: StringFieldUpdateOperationsInput | string
  }

  export type MetricUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetricUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MetricUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    weight?: FloatFieldUpdateOperationsInput | number
    height?: FloatFieldUpdateOperationsInput | number
    bmi?: FloatFieldUpdateOperationsInput | number
    bloodPressure?: StringFieldUpdateOperationsInput | string
    hipCircumference?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type MedicationCycleUpdateWithoutUserInput = {
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUpdateManyWithoutCycleNestedInput
  }

  export type MedicationCycleUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
    metricLogs?: MetricLogUncheckedUpdateManyWithoutCycleNestedInput
    doseLogs?: DoseLogUncheckedUpdateManyWithoutCycleNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutCycleNestedInput
  }

  export type MedicationCycleUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    dosage?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    frequencyDays?: IntFieldUpdateOperationsInput | number
    dosesPerDay?: IntFieldUpdateOperationsInput | number
    metricsToMonitor?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NotificationUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    cycle?: MedicationCycleUpdateOneWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    cycleId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MedicationLogCreateManyMedicationInput = {
    id?: number
    date: Date | string
    dosage: string
  }

  export type MedicationLogUpdateWithoutMedicationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationLogUncheckedUpdateWithoutMedicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MedicationLogUncheckedUpdateManyWithoutMedicationInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    dosage?: StringFieldUpdateOperationsInput | string
  }

  export type MetricLogCreateManyCycleInput = {
    id?: number
    date?: Date | string
    kind: string
    valueFloat?: number | null
    valueText?: string | null
    notes?: string | null
  }

  export type DoseLogCreateManyCycleInput = {
    id?: number
    date: Date | string
    taken?: boolean
  }

  export type NotificationCreateManyCycleInput = {
    id?: number
    userId: number
    date: Date | string
    message: string
    sent?: boolean
  }

  export type MetricLogUpdateWithoutCycleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricLogUncheckedUpdateWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MetricLogUncheckedUpdateManyWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    kind?: StringFieldUpdateOperationsInput | string
    valueFloat?: NullableFloatFieldUpdateOperationsInput | number | null
    valueText?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DoseLogUpdateWithoutCycleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoseLogUncheckedUpdateWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type DoseLogUncheckedUpdateManyWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    taken?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUpdateWithoutCycleInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyWithoutCycleInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    message?: StringFieldUpdateOperationsInput | string
    sent?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationCountOutputTypeDefaultArgs instead
     */
    export type MedicationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationCycleCountOutputTypeDefaultArgs instead
     */
    export type MedicationCycleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationCycleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationDefaultArgs instead
     */
    export type MedicationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationLogDefaultArgs instead
     */
    export type MedicationLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetricDefaultArgs instead
     */
    export type MetricArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetricDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MedicationCycleDefaultArgs instead
     */
    export type MedicationCycleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MedicationCycleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MetricLogDefaultArgs instead
     */
    export type MetricLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MetricLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoseLogDefaultArgs instead
     */
    export type DoseLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoseLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}